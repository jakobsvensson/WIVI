/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/mithril/api/mount-redraw.js":
/*!**************************************************!*\
  !*** ./node_modules/mithril/api/mount-redraw.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")

module.exports = function(render, schedule, console) {
	var subscriptions = []
	var rendering = false
	var pending = false

	function sync() {
		if (rendering) throw new Error("Nested m.redraw.sync() call")
		rendering = true
		for (var i = 0; i < subscriptions.length; i += 2) {
			try { render(subscriptions[i], Vnode(subscriptions[i + 1]), redraw) }
			catch (e) { console.error(e) }
		}
		rendering = false
	}

	function redraw() {
		if (!pending) {
			pending = true
			schedule(function() {
				pending = false
				sync()
			})
		}
	}

	redraw.sync = sync

	function mount(root, component) {
		if (component != null && component.view == null && typeof component !== "function") {
			throw new TypeError("m.mount(element, component) expects a component, not a vnode")
		}

		var index = subscriptions.indexOf(root)
		if (index >= 0) {
			subscriptions.splice(index, 2)
			render(root, [], redraw)
		}

		if (component != null) {
			subscriptions.push(root, component)
			render(root, Vnode(component), redraw)
		}
	}

	return {mount: mount, redraw: redraw}
}


/***/ }),

/***/ "./node_modules/mithril/api/router.js":
/*!********************************************!*\
  !*** ./node_modules/mithril/api/router.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")
var m = __webpack_require__(/*! ../render/hyperscript */ "./node_modules/mithril/render/hyperscript.js")
var Promise = __webpack_require__(/*! ../promise/promise */ "./node_modules/mithril/promise/promise.js")

var buildPathname = __webpack_require__(/*! ../pathname/build */ "./node_modules/mithril/pathname/build.js")
var parsePathname = __webpack_require__(/*! ../pathname/parse */ "./node_modules/mithril/pathname/parse.js")
var compileTemplate = __webpack_require__(/*! ../pathname/compileTemplate */ "./node_modules/mithril/pathname/compileTemplate.js")
var assign = __webpack_require__(/*! ../pathname/assign */ "./node_modules/mithril/pathname/assign.js")

var sentinel = {}

module.exports = function($window, mountRedraw) {
	var fireAsync

	function setPath(path, data, options) {
		path = buildPathname(path, data)
		if (fireAsync != null) {
			fireAsync()
			var state = options ? options.state : null
			var title = options ? options.title : null
			if (options && options.replace) $window.history.replaceState(state, title, route.prefix + path)
			else $window.history.pushState(state, title, route.prefix + path)
		}
		else {
			$window.location.href = route.prefix + path
		}
	}

	var currentResolver = sentinel, component, attrs, currentPath, lastUpdate

	var SKIP = route.SKIP = {}

	function route(root, defaultRoute, routes) {
		if (root == null) throw new Error("Ensure the DOM element that was passed to `m.route` is not undefined")
		// 0 = start
		// 1 = init
		// 2 = ready
		var state = 0

		var compiled = Object.keys(routes).map(function(route) {
			if (route[0] !== "/") throw new SyntaxError("Routes must start with a `/`")
			if ((/:([^\/\.-]+)(\.{3})?:/).test(route)) {
				throw new SyntaxError("Route parameter names must be separated with either `/`, `.`, or `-`")
			}
			return {
				route: route,
				component: routes[route],
				check: compileTemplate(route),
			}
		})
		var callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout
		var p = Promise.resolve()
		var scheduled = false
		var onremove

		fireAsync = null

		if (defaultRoute != null) {
			var defaultData = parsePathname(defaultRoute)

			if (!compiled.some(function (i) { return i.check(defaultData) })) {
				throw new ReferenceError("Default route doesn't match any known routes")
			}
		}

		function resolveRoute() {
			scheduled = false
			// Consider the pathname holistically. The prefix might even be invalid,
			// but that's not our problem.
			var prefix = $window.location.hash
			if (route.prefix[0] !== "#") {
				prefix = $window.location.search + prefix
				if (route.prefix[0] !== "?") {
					prefix = $window.location.pathname + prefix
					if (prefix[0] !== "/") prefix = "/" + prefix
				}
			}
			// This seemingly useless `.concat()` speeds up the tests quite a bit,
			// since the representation is consistently a relatively poorly
			// optimized cons string.
			var path = prefix.concat()
				.replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)
				.slice(route.prefix.length)
			var data = parsePathname(path)

			assign(data.params, $window.history.state)

			function fail() {
				if (path === defaultRoute) throw new Error("Could not resolve default route " + defaultRoute)
				setPath(defaultRoute, null, {replace: true})
			}

			loop(0)
			function loop(i) {
				// 0 = init
				// 1 = scheduled
				// 2 = done
				for (; i < compiled.length; i++) {
					if (compiled[i].check(data)) {
						var payload = compiled[i].component
						var matchedRoute = compiled[i].route
						var localComp = payload
						var update = lastUpdate = function(comp) {
							if (update !== lastUpdate) return
							if (comp === SKIP) return loop(i + 1)
							component = comp != null && (typeof comp.view === "function" || typeof comp === "function")? comp : "div"
							attrs = data.params, currentPath = path, lastUpdate = null
							currentResolver = payload.render ? payload : null
							if (state === 2) mountRedraw.redraw()
							else {
								state = 2
								mountRedraw.redraw.sync()
							}
						}
						// There's no understating how much I *wish* I could
						// use `async`/`await` here...
						if (payload.view || typeof payload === "function") {
							payload = {}
							update(localComp)
						}
						else if (payload.onmatch) {
							p.then(function () {
								return payload.onmatch(data.params, path, matchedRoute)
							}).then(update, fail)
						}
						else update("div")
						return
					}
				}
				fail()
			}
		}

		// Set it unconditionally so `m.route.set` and `m.route.Link` both work,
		// even if neither `pushState` nor `hashchange` are supported. It's
		// cleared if `hashchange` is used, since that makes it automatically
		// async.
		fireAsync = function() {
			if (!scheduled) {
				scheduled = true
				callAsync(resolveRoute)
			}
		}

		if (typeof $window.history.pushState === "function") {
			onremove = function() {
				$window.removeEventListener("popstate", fireAsync, false)
			}
			$window.addEventListener("popstate", fireAsync, false)
		} else if (route.prefix[0] === "#") {
			fireAsync = null
			onremove = function() {
				$window.removeEventListener("hashchange", resolveRoute, false)
			}
			$window.addEventListener("hashchange", resolveRoute, false)
		}

		return mountRedraw.mount(root, {
			onbeforeupdate: function() {
				state = state ? 2 : 1
				return !(!state || sentinel === currentResolver)
			},
			oncreate: resolveRoute,
			onremove: onremove,
			view: function() {
				if (!state || sentinel === currentResolver) return
				// Wrap in a fragment to preserve existing key semantics
				var vnode = [Vnode(component, attrs.key, attrs)]
				if (currentResolver) vnode = currentResolver.render(vnode[0])
				return vnode
			},
		})
	}
	route.set = function(path, data, options) {
		if (lastUpdate != null) {
			options = options || {}
			options.replace = true
		}
		lastUpdate = null
		setPath(path, data, options)
	}
	route.get = function() {return currentPath}
	route.prefix = "#!"
	route.Link = {
		view: function(vnode) {
			var options = vnode.attrs.options
			// Remove these so they don't get overwritten
			var attrs = {}, onclick, href
			assign(attrs, vnode.attrs)
			// The first two are internal, but the rest are magic attributes
			// that need censored to not screw up rendering.
			attrs.selector = attrs.options = attrs.key = attrs.oninit =
			attrs.oncreate = attrs.onbeforeupdate = attrs.onupdate =
			attrs.onbeforeremove = attrs.onremove = null

			// Do this now so we can get the most current `href` and `disabled`.
			// Those attributes may also be specified in the selector, and we
			// should honor that.
			var child = m(vnode.attrs.selector || "a", attrs, vnode.children)

			// Let's provide a *right* way to disable a route link, rather than
			// letting people screw up accessibility on accident.
			//
			// The attribute is coerced so users don't get surprised over
			// `disabled: 0` resulting in a button that's somehow routable
			// despite being visibly disabled.
			if (child.attrs.disabled = Boolean(child.attrs.disabled)) {
				child.attrs.href = null
				child.attrs["aria-disabled"] = "true"
				// If you *really* do want to do this on a disabled link, use
				// an `oncreate` hook to add it.
				child.attrs.onclick = null
			} else {
				onclick = child.attrs.onclick
				href = child.attrs.href
				child.attrs.href = route.prefix + href
				child.attrs.onclick = function(e) {
					var result
					if (typeof onclick === "function") {
						result = onclick.call(e.currentTarget, e)
					} else if (onclick == null || typeof onclick !== "object") {
						// do nothing
					} else if (typeof onclick.handleEvent === "function") {
						onclick.handleEvent(e)
					}

					// Adapted from React Router's implementation:
					// https://github.com/ReactTraining/react-router/blob/520a0acd48ae1b066eb0b07d6d4d1790a1d02482/packages/react-router-dom/modules/Link.js
					//
					// Try to be flexible and intuitive in how we handle links.
					// Fun fact: links aren't as obvious to get right as you
					// would expect. There's a lot more valid ways to click a
					// link than this, and one might want to not simply click a
					// link, but right click or command-click it to copy the
					// link target, etc. Nope, this isn't just for blind people.
					if (
						// Skip if `onclick` prevented default
						result !== false && !e.defaultPrevented &&
						// Ignore everything but left clicks
						(e.button === 0 || e.which === 0 || e.which === 1) &&
						// Let the browser handle `target=_blank`, etc.
						(!e.currentTarget.target || e.currentTarget.target === "_self") &&
						// No modifier keys
						!e.ctrlKey && !e.metaKey && !e.shiftKey && !e.altKey
					) {
						e.preventDefault()
						e.redraw = false
						route.set(href, null, options)
					}
				}
			}
			return child
		},
	}
	route.param = function(key) {
		return attrs && key != null ? attrs[key] : attrs
	}

	return route
}


/***/ }),

/***/ "./node_modules/mithril/hyperscript.js":
/*!*********************************************!*\
  !*** ./node_modules/mithril/hyperscript.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var hyperscript = __webpack_require__(/*! ./render/hyperscript */ "./node_modules/mithril/render/hyperscript.js")

hyperscript.trust = __webpack_require__(/*! ./render/trust */ "./node_modules/mithril/render/trust.js")
hyperscript.fragment = __webpack_require__(/*! ./render/fragment */ "./node_modules/mithril/render/fragment.js")

module.exports = hyperscript


/***/ }),

/***/ "./node_modules/mithril/index.js":
/*!***************************************!*\
  !*** ./node_modules/mithril/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var hyperscript = __webpack_require__(/*! ./hyperscript */ "./node_modules/mithril/hyperscript.js")
var request = __webpack_require__(/*! ./request */ "./node_modules/mithril/request.js")
var mountRedraw = __webpack_require__(/*! ./mount-redraw */ "./node_modules/mithril/mount-redraw.js")

var m = function m() { return hyperscript.apply(this, arguments) }
m.m = hyperscript
m.trust = hyperscript.trust
m.fragment = hyperscript.fragment
m.mount = mountRedraw.mount
m.route = __webpack_require__(/*! ./route */ "./node_modules/mithril/route.js")
m.render = __webpack_require__(/*! ./render */ "./node_modules/mithril/render.js")
m.redraw = mountRedraw.redraw
m.request = request.request
m.jsonp = request.jsonp
m.parseQueryString = __webpack_require__(/*! ./querystring/parse */ "./node_modules/mithril/querystring/parse.js")
m.buildQueryString = __webpack_require__(/*! ./querystring/build */ "./node_modules/mithril/querystring/build.js")
m.parsePathname = __webpack_require__(/*! ./pathname/parse */ "./node_modules/mithril/pathname/parse.js")
m.buildPathname = __webpack_require__(/*! ./pathname/build */ "./node_modules/mithril/pathname/build.js")
m.vnode = __webpack_require__(/*! ./render/vnode */ "./node_modules/mithril/render/vnode.js")
m.PromisePolyfill = __webpack_require__(/*! ./promise/polyfill */ "./node_modules/mithril/promise/polyfill.js")

module.exports = m


/***/ }),

/***/ "./node_modules/mithril/mount-redraw.js":
/*!**********************************************!*\
  !*** ./node_modules/mithril/mount-redraw.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var render = __webpack_require__(/*! ./render */ "./node_modules/mithril/render.js")

module.exports = __webpack_require__(/*! ./api/mount-redraw */ "./node_modules/mithril/api/mount-redraw.js")(render, requestAnimationFrame, console)


/***/ }),

/***/ "./node_modules/mithril/pathname/assign.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/pathname/assign.js ***!
  \*************************************************/
/***/ ((module) => {



module.exports = Object.assign || function(target, source) {
	if(source) Object.keys(source).forEach(function(key) { target[key] = source[key] })
}


/***/ }),

/***/ "./node_modules/mithril/pathname/build.js":
/*!************************************************!*\
  !*** ./node_modules/mithril/pathname/build.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var buildQueryString = __webpack_require__(/*! ../querystring/build */ "./node_modules/mithril/querystring/build.js")
var assign = __webpack_require__(/*! ./assign */ "./node_modules/mithril/pathname/assign.js")

// Returns `path` from `template` + `params`
module.exports = function(template, params) {
	if ((/:([^\/\.-]+)(\.{3})?:/).test(template)) {
		throw new SyntaxError("Template parameter names *must* be separated")
	}
	if (params == null) return template
	var queryIndex = template.indexOf("?")
	var hashIndex = template.indexOf("#")
	var queryEnd = hashIndex < 0 ? template.length : hashIndex
	var pathEnd = queryIndex < 0 ? queryEnd : queryIndex
	var path = template.slice(0, pathEnd)
	var query = {}

	assign(query, params)

	var resolved = path.replace(/:([^\/\.-]+)(\.{3})?/g, function(m, key, variadic) {
		delete query[key]
		// If no such parameter exists, don't interpolate it.
		if (params[key] == null) return m
		// Escape normal parameters, but not variadic ones.
		return variadic ? params[key] : encodeURIComponent(String(params[key]))
	})

	// In case the template substitution adds new query/hash parameters.
	var newQueryIndex = resolved.indexOf("?")
	var newHashIndex = resolved.indexOf("#")
	var newQueryEnd = newHashIndex < 0 ? resolved.length : newHashIndex
	var newPathEnd = newQueryIndex < 0 ? newQueryEnd : newQueryIndex
	var result = resolved.slice(0, newPathEnd)

	if (queryIndex >= 0) result += template.slice(queryIndex, queryEnd)
	if (newQueryIndex >= 0) result += (queryIndex < 0 ? "?" : "&") + resolved.slice(newQueryIndex, newQueryEnd)
	var querystring = buildQueryString(query)
	if (querystring) result += (queryIndex < 0 && newQueryIndex < 0 ? "?" : "&") + querystring
	if (hashIndex >= 0) result += template.slice(hashIndex)
	if (newHashIndex >= 0) result += (hashIndex < 0 ? "" : "&") + resolved.slice(newHashIndex)
	return result
}


/***/ }),

/***/ "./node_modules/mithril/pathname/compileTemplate.js":
/*!**********************************************************!*\
  !*** ./node_modules/mithril/pathname/compileTemplate.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var parsePathname = __webpack_require__(/*! ./parse */ "./node_modules/mithril/pathname/parse.js")

// Compiles a template into a function that takes a resolved path (without query
// strings) and returns an object containing the template parameters with their
// parsed values. This expects the input of the compiled template to be the
// output of `parsePathname`. Note that it does *not* remove query parameters
// specified in the template.
module.exports = function(template) {
	var templateData = parsePathname(template)
	var templateKeys = Object.keys(templateData.params)
	var keys = []
	var regexp = new RegExp("^" + templateData.path.replace(
		// I escape literal text so people can use things like `:file.:ext` or
		// `:lang-:locale` in routes. This is all merged into one pass so I
		// don't also accidentally escape `-` and make it harder to detect it to
		// ban it from template parameters.
		/:([^\/.-]+)(\.{3}|\.(?!\.)|-)?|[\\^$*+.()|\[\]{}]/g,
		function(m, key, extra) {
			if (key == null) return "\\" + m
			keys.push({k: key, r: extra === "..."})
			if (extra === "...") return "(.*)"
			if (extra === ".") return "([^/]+)\\."
			return "([^/]+)" + (extra || "")
		}
	) + "$")
	return function(data) {
		// First, check the params. Usually, there isn't any, and it's just
		// checking a static set.
		for (var i = 0; i < templateKeys.length; i++) {
			if (templateData.params[templateKeys[i]] !== data.params[templateKeys[i]]) return false
		}
		// If no interpolations exist, let's skip all the ceremony
		if (!keys.length) return regexp.test(data.path)
		var values = regexp.exec(data.path)
		if (values == null) return false
		for (var i = 0; i < keys.length; i++) {
			data.params[keys[i].k] = keys[i].r ? values[i + 1] : decodeURIComponent(values[i + 1])
		}
		return true
	}
}


/***/ }),

/***/ "./node_modules/mithril/pathname/parse.js":
/*!************************************************!*\
  !*** ./node_modules/mithril/pathname/parse.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var parseQueryString = __webpack_require__(/*! ../querystring/parse */ "./node_modules/mithril/querystring/parse.js")

// Returns `{path, params}` from `url`
module.exports = function(url) {
	var queryIndex = url.indexOf("?")
	var hashIndex = url.indexOf("#")
	var queryEnd = hashIndex < 0 ? url.length : hashIndex
	var pathEnd = queryIndex < 0 ? queryEnd : queryIndex
	var path = url.slice(0, pathEnd).replace(/\/{2,}/g, "/")

	if (!path) path = "/"
	else {
		if (path[0] !== "/") path = "/" + path
		if (path.length > 1 && path[path.length - 1] === "/") path = path.slice(0, -1)
	}
	return {
		path: path,
		params: queryIndex < 0
			? {}
			: parseQueryString(url.slice(queryIndex + 1, queryEnd)),
	}
}


/***/ }),

/***/ "./node_modules/mithril/promise/polyfill.js":
/*!**************************************************!*\
  !*** ./node_modules/mithril/promise/polyfill.js ***!
  \**************************************************/
/***/ ((module) => {


/** @constructor */
var PromisePolyfill = function(executor) {
	if (!(this instanceof PromisePolyfill)) throw new Error("Promise must be called with `new`")
	if (typeof executor !== "function") throw new TypeError("executor must be a function")

	var self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)
	var instance = self._instance = {resolvers: resolvers, rejectors: rejectors}
	var callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout
	function handler(list, shouldAbsorb) {
		return function execute(value) {
			var then
			try {
				if (shouldAbsorb && value != null && (typeof value === "object" || typeof value === "function") && typeof (then = value.then) === "function") {
					if (value === self) throw new TypeError("Promise can't be resolved w/ itself")
					executeOnce(then.bind(value))
				}
				else {
					callAsync(function() {
						if (!shouldAbsorb && list.length === 0) console.error("Possible unhandled promise rejection:", value)
						for (var i = 0; i < list.length; i++) list[i](value)
						resolvers.length = 0, rejectors.length = 0
						instance.state = shouldAbsorb
						instance.retry = function() {execute(value)}
					})
				}
			}
			catch (e) {
				rejectCurrent(e)
			}
		}
	}
	function executeOnce(then) {
		var runs = 0
		function run(fn) {
			return function(value) {
				if (runs++ > 0) return
				fn(value)
			}
		}
		var onerror = run(rejectCurrent)
		try {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}
	}

	executeOnce(executor)
}
PromisePolyfill.prototype.then = function(onFulfilled, onRejection) {
	var self = this, instance = self._instance
	function handle(callback, list, next, state) {
		list.push(function(value) {
			if (typeof callback !== "function") next(value)
			else try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}
		})
		if (typeof instance.retry === "function" && state === instance.state) instance.retry()
	}
	var resolveNext, rejectNext
	var promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})
	handle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)
	return promise
}
PromisePolyfill.prototype.catch = function(onRejection) {
	return this.then(null, onRejection)
}
PromisePolyfill.prototype.finally = function(callback) {
	return this.then(
		function(value) {
			return PromisePolyfill.resolve(callback()).then(function() {
				return value
			})
		},
		function(reason) {
			return PromisePolyfill.resolve(callback()).then(function() {
				return PromisePolyfill.reject(reason);
			})
		}
	)
}
PromisePolyfill.resolve = function(value) {
	if (value instanceof PromisePolyfill) return value
	return new PromisePolyfill(function(resolve) {resolve(value)})
}
PromisePolyfill.reject = function(value) {
	return new PromisePolyfill(function(resolve, reject) {reject(value)})
}
PromisePolyfill.all = function(list) {
	return new PromisePolyfill(function(resolve, reject) {
		var total = list.length, count = 0, values = []
		if (list.length === 0) resolve([])
		else for (var i = 0; i < list.length; i++) {
			(function(i) {
				function consume(value) {
					count++
					values[i] = value
					if (count === total) resolve(values)
				}
				if (list[i] != null && (typeof list[i] === "object" || typeof list[i] === "function") && typeof list[i].then === "function") {
					list[i].then(consume, reject)
				}
				else consume(list[i])
			})(i)
		}
	})
}
PromisePolyfill.race = function(list) {
	return new PromisePolyfill(function(resolve, reject) {
		for (var i = 0; i < list.length; i++) {
			list[i].then(resolve, reject)
		}
	})
}

module.exports = PromisePolyfill


/***/ }),

/***/ "./node_modules/mithril/promise/promise.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/promise/promise.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var PromisePolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/mithril/promise/polyfill.js")

if (typeof window !== "undefined") {
	if (typeof window.Promise === "undefined") {
		window.Promise = PromisePolyfill
	} else if (!window.Promise.prototype.finally) {
		window.Promise.prototype.finally = PromisePolyfill.prototype.finally
	}
	module.exports = window.Promise
} else if (typeof __webpack_require__.g !== "undefined") {
	if (typeof __webpack_require__.g.Promise === "undefined") {
		__webpack_require__.g.Promise = PromisePolyfill
	} else if (!__webpack_require__.g.Promise.prototype.finally) {
		__webpack_require__.g.Promise.prototype.finally = PromisePolyfill.prototype.finally
	}
	module.exports = __webpack_require__.g.Promise
} else {
	module.exports = PromisePolyfill
}


/***/ }),

/***/ "./node_modules/mithril/querystring/build.js":
/*!***************************************************!*\
  !*** ./node_modules/mithril/querystring/build.js ***!
  \***************************************************/
/***/ ((module) => {



module.exports = function(object) {
	if (Object.prototype.toString.call(object) !== "[object Object]") return ""

	var args = []
	for (var key in object) {
		destructure(key, object[key])
	}

	return args.join("&")

	function destructure(key, value) {
		if (Array.isArray(value)) {
			for (var i = 0; i < value.length; i++) {
				destructure(key + "[" + i + "]", value[i])
			}
		}
		else if (Object.prototype.toString.call(value) === "[object Object]") {
			for (var i in value) {
				destructure(key + "[" + i + "]", value[i])
			}
		}
		else args.push(encodeURIComponent(key) + (value != null && value !== "" ? "=" + encodeURIComponent(value) : ""))
	}
}


/***/ }),

/***/ "./node_modules/mithril/querystring/parse.js":
/*!***************************************************!*\
  !*** ./node_modules/mithril/querystring/parse.js ***!
  \***************************************************/
/***/ ((module) => {



module.exports = function(string) {
	if (string === "" || string == null) return {}
	if (string.charAt(0) === "?") string = string.slice(1)

	var entries = string.split("&"), counters = {}, data = {}
	for (var i = 0; i < entries.length; i++) {
		var entry = entries[i].split("=")
		var key = decodeURIComponent(entry[0])
		var value = entry.length === 2 ? decodeURIComponent(entry[1]) : ""

		if (value === "true") value = true
		else if (value === "false") value = false

		var levels = key.split(/\]\[?|\[/)
		var cursor = data
		if (key.indexOf("[") > -1) levels.pop()
		for (var j = 0; j < levels.length; j++) {
			var level = levels[j], nextLevel = levels[j + 1]
			var isNumber = nextLevel == "" || !isNaN(parseInt(nextLevel, 10))
			if (level === "") {
				var key = levels.slice(0, j).join()
				if (counters[key] == null) {
					counters[key] = Array.isArray(cursor) ? cursor.length : 0
				}
				level = counters[key]++
			}
			// Disallow direct prototype pollution
			else if (level === "__proto__") break
			if (j === levels.length - 1) cursor[level] = value
			else {
				// Read own properties exclusively to disallow indirect
				// prototype pollution
				var desc = Object.getOwnPropertyDescriptor(cursor, level)
				if (desc != null) desc = desc.value
				if (desc == null) cursor[level] = desc = isNumber ? [] : {}
				cursor = desc
			}
		}
	}
	return data
}


/***/ }),

/***/ "./node_modules/mithril/render.js":
/*!****************************************!*\
  !*** ./node_modules/mithril/render.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = __webpack_require__(/*! ./render/render */ "./node_modules/mithril/render/render.js")(window)


/***/ }),

/***/ "./node_modules/mithril/render/fragment.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/render/fragment.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")
var hyperscriptVnode = __webpack_require__(/*! ./hyperscriptVnode */ "./node_modules/mithril/render/hyperscriptVnode.js")

module.exports = function() {
	var vnode = hyperscriptVnode.apply(0, arguments)

	vnode.tag = "["
	vnode.children = Vnode.normalizeChildren(vnode.children)
	return vnode
}


/***/ }),

/***/ "./node_modules/mithril/render/hyperscript.js":
/*!****************************************************!*\
  !*** ./node_modules/mithril/render/hyperscript.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")
var hyperscriptVnode = __webpack_require__(/*! ./hyperscriptVnode */ "./node_modules/mithril/render/hyperscriptVnode.js")

var selectorParser = /(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g
var selectorCache = {}
var hasOwn = {}.hasOwnProperty

function isEmpty(object) {
	for (var key in object) if (hasOwn.call(object, key)) return false
	return true
}

function compileSelector(selector) {
	var match, tag = "div", classes = [], attrs = {}
	while (match = selectorParser.exec(selector)) {
		var type = match[1], value = match[2]
		if (type === "" && value !== "") tag = value
		else if (type === "#") attrs.id = value
		else if (type === ".") classes.push(value)
		else if (match[3][0] === "[") {
			var attrValue = match[6]
			if (attrValue) attrValue = attrValue.replace(/\\(["'])/g, "$1").replace(/\\\\/g, "\\")
			if (match[4] === "class") classes.push(attrValue)
			else attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true
		}
	}
	if (classes.length > 0) attrs.className = classes.join(" ")
	return selectorCache[selector] = {tag: tag, attrs: attrs}
}

function execSelector(state, vnode) {
	var attrs = vnode.attrs
	var children = Vnode.normalizeChildren(vnode.children)
	var hasClass = hasOwn.call(attrs, "class")
	var className = hasClass ? attrs.class : attrs.className

	vnode.tag = state.tag
	vnode.attrs = null
	vnode.children = undefined

	if (!isEmpty(state.attrs) && !isEmpty(attrs)) {
		var newAttrs = {}

		for (var key in attrs) {
			if (hasOwn.call(attrs, key)) newAttrs[key] = attrs[key]
		}

		attrs = newAttrs
	}

	for (var key in state.attrs) {
		if (hasOwn.call(state.attrs, key) && key !== "className" && !hasOwn.call(attrs, key)){
			attrs[key] = state.attrs[key]
		}
	}
	if (className != null || state.attrs.className != null) attrs.className =
		className != null
			? state.attrs.className != null
				? String(state.attrs.className) + " " + String(className)
				: className
			: state.attrs.className != null
				? state.attrs.className
				: null

	if (hasClass) attrs.class = null

	for (var key in attrs) {
		if (hasOwn.call(attrs, key) && key !== "key") {
			vnode.attrs = attrs
			break
		}
	}

	if (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === "#") {
		vnode.text = children[0].children
	} else {
		vnode.children = children
	}

	return vnode
}

function hyperscript(selector) {
	if (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") {
		throw Error("The selector must be either a string or a component.");
	}

	var vnode = hyperscriptVnode.apply(1, arguments)

	if (typeof selector === "string") {
		vnode.children = Vnode.normalizeChildren(vnode.children)
		if (selector !== "[") return execSelector(selectorCache[selector] || compileSelector(selector), vnode)
	}

	vnode.tag = selector
	return vnode
}

module.exports = hyperscript


/***/ }),

/***/ "./node_modules/mithril/render/hyperscriptVnode.js":
/*!*********************************************************!*\
  !*** ./node_modules/mithril/render/hyperscriptVnode.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")

// Call via `hyperscriptVnode.apply(startOffset, arguments)`
//
// The reason I do it this way, forwarding the arguments and passing the start
// offset in `this`, is so I don't have to create a temporary array in a
// performance-critical path.
//
// In native ES6, I'd instead add a final `...args` parameter to the
// `hyperscript` and `fragment` factories and define this as
// `hyperscriptVnode(...args)`, since modern engines do optimize that away. But
// ES5 (what Mithril requires thanks to IE support) doesn't give me that luxury,
// and engines aren't nearly intelligent enough to do either of these:
//
// 1. Elide the allocation for `[].slice.call(arguments, 1)` when it's passed to
//    another function only to be indexed.
// 2. Elide an `arguments` allocation when it's passed to any function other
//    than `Function.prototype.apply` or `Reflect.apply`.
//
// In ES6, it'd probably look closer to this (I'd need to profile it, though):
// module.exports = function(attrs, ...children) {
//     if (attrs == null || typeof attrs === "object" && attrs.tag == null && !Array.isArray(attrs)) {
//         if (children.length === 1 && Array.isArray(children[0])) children = children[0]
//     } else {
//         children = children.length === 0 && Array.isArray(attrs) ? attrs : [attrs, ...children]
//         attrs = undefined
//     }
//
//     if (attrs == null) attrs = {}
//     return Vnode("", attrs.key, attrs, children)
// }
module.exports = function() {
	var attrs = arguments[this], start = this + 1, children

	if (attrs == null) {
		attrs = {}
	} else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {
		attrs = {}
		start = this
	}

	if (arguments.length === start + 1) {
		children = arguments[start]
		if (!Array.isArray(children)) children = [children]
	} else {
		children = []
		while (start < arguments.length) children.push(arguments[start++])
	}

	return Vnode("", attrs.key, attrs, children)
}


/***/ }),

/***/ "./node_modules/mithril/render/render.js":
/*!***********************************************!*\
  !*** ./node_modules/mithril/render/render.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")

module.exports = function($window) {
	var $doc = $window && $window.document
	var currentRedraw

	var nameSpace = {
		svg: "http://www.w3.org/2000/svg",
		math: "http://www.w3.org/1998/Math/MathML"
	}

	function getNameSpace(vnode) {
		return vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]
	}

	//sanity check to discourage people from doing `vnode.state = ...`
	function checkState(vnode, original) {
		if (vnode.state !== original) throw new Error("`vnode.state` must not be modified")
	}

	//Note: the hook is passed as the `this` argument to allow proxying the
	//arguments without requiring a full array allocation to do so. It also
	//takes advantage of the fact the current `vnode` is the first argument in
	//all lifecycle methods.
	function callHook(vnode) {
		var original = vnode.state
		try {
			return this.apply(original, arguments)
		} finally {
			checkState(vnode, original)
		}
	}

	// IE11 (at least) throws an UnspecifiedError when accessing document.activeElement when
	// inside an iframe. Catch and swallow this error, and heavy-handidly return null.
	function activeElement() {
		try {
			return $doc.activeElement
		} catch (e) {
			return null
		}
	}
	//create
	function createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {
		for (var i = start; i < end; i++) {
			var vnode = vnodes[i]
			if (vnode != null) {
				createNode(parent, vnode, hooks, ns, nextSibling)
			}
		}
	}
	function createNode(parent, vnode, hooks, ns, nextSibling) {
		var tag = vnode.tag
		if (typeof tag === "string") {
			vnode.state = {}
			if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)
			switch (tag) {
				case "#": createText(parent, vnode, nextSibling); break
				case "<": createHTML(parent, vnode, ns, nextSibling); break
				case "[": createFragment(parent, vnode, hooks, ns, nextSibling); break
				default: createElement(parent, vnode, hooks, ns, nextSibling)
			}
		}
		else createComponent(parent, vnode, hooks, ns, nextSibling)
	}
	function createText(parent, vnode, nextSibling) {
		vnode.dom = $doc.createTextNode(vnode.children)
		insertNode(parent, vnode.dom, nextSibling)
	}
	var possibleParents = {caption: "table", thead: "table", tbody: "table", tfoot: "table", tr: "tbody", th: "tr", td: "tr", colgroup: "table", col: "colgroup"}
	function createHTML(parent, vnode, ns, nextSibling) {
		var match = vnode.children.match(/^\s*?<(\w+)/im) || []
		// not using the proper parent makes the child element(s) vanish.
		//     var div = document.createElement("div")
		//     div.innerHTML = "<td>i</td><td>j</td>"
		//     console.log(div.innerHTML)
		// --> "ij", no <td> in sight.
		var temp = $doc.createElement(possibleParents[match[1]] || "div")
		if (ns === "http://www.w3.org/2000/svg") {
			temp.innerHTML = "<svg xmlns=\"http://www.w3.org/2000/svg\">" + vnode.children + "</svg>"
			temp = temp.firstChild
		} else {
			temp.innerHTML = vnode.children
		}
		vnode.dom = temp.firstChild
		vnode.domSize = temp.childNodes.length
		// Capture nodes to remove, so we don't confuse them.
		vnode.instance = []
		var fragment = $doc.createDocumentFragment()
		var child
		while (child = temp.firstChild) {
			vnode.instance.push(child)
			fragment.appendChild(child)
		}
		insertNode(parent, fragment, nextSibling)
	}
	function createFragment(parent, vnode, hooks, ns, nextSibling) {
		var fragment = $doc.createDocumentFragment()
		if (vnode.children != null) {
			var children = vnode.children
			createNodes(fragment, children, 0, children.length, hooks, null, ns)
		}
		vnode.dom = fragment.firstChild
		vnode.domSize = fragment.childNodes.length
		insertNode(parent, fragment, nextSibling)
	}
	function createElement(parent, vnode, hooks, ns, nextSibling) {
		var tag = vnode.tag
		var attrs = vnode.attrs
		var is = attrs && attrs.is

		ns = getNameSpace(vnode) || ns

		var element = ns ?
			is ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :
			is ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)
		vnode.dom = element

		if (attrs != null) {
			setAttrs(vnode, attrs, ns)
		}

		insertNode(parent, element, nextSibling)

		if (!maybeSetContentEditable(vnode)) {
			if (vnode.text != null) {
				if (vnode.text !== "") element.textContent = vnode.text
				else vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]
			}
			if (vnode.children != null) {
				var children = vnode.children
				createNodes(element, children, 0, children.length, hooks, null, ns)
				if (vnode.tag === "select" && attrs != null) setLateSelectAttrs(vnode, attrs)
			}
		}
	}
	function initComponent(vnode, hooks) {
		var sentinel
		if (typeof vnode.tag.view === "function") {
			vnode.state = Object.create(vnode.tag)
			sentinel = vnode.state.view
			if (sentinel.$$reentrantLock$$ != null) return
			sentinel.$$reentrantLock$$ = true
		} else {
			vnode.state = void 0
			sentinel = vnode.tag
			if (sentinel.$$reentrantLock$$ != null) return
			sentinel.$$reentrantLock$$ = true
			vnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function") ? new vnode.tag(vnode) : vnode.tag(vnode)
		}
		initLifecycle(vnode.state, vnode, hooks)
		if (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)
		vnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode))
		if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")
		sentinel.$$reentrantLock$$ = null
	}
	function createComponent(parent, vnode, hooks, ns, nextSibling) {
		initComponent(vnode, hooks)
		if (vnode.instance != null) {
			createNode(parent, vnode.instance, hooks, ns, nextSibling)
			vnode.dom = vnode.instance.dom
			vnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0
		}
		else {
			vnode.domSize = 0
		}
	}

	//update
	/**
	 * @param {Element|Fragment} parent - the parent element
	 * @param {Vnode[] | null} old - the list of vnodes of the last `render()` call for
	 *                               this part of the tree
	 * @param {Vnode[] | null} vnodes - as above, but for the current `render()` call.
	 * @param {Function[]} hooks - an accumulator of post-render hooks (oncreate/onupdate)
	 * @param {Element | null} nextSibling - the next DOM node if we're dealing with a
	 *                                       fragment that is not the last item in its
	 *                                       parent
	 * @param {'svg' | 'math' | String | null} ns) - the current XML namespace, if any
	 * @returns void
	 */
	// This function diffs and patches lists of vnodes, both keyed and unkeyed.
	//
	// We will:
	//
	// 1. describe its general structure
	// 2. focus on the diff algorithm optimizations
	// 3. discuss DOM node operations.

	// ## Overview:
	//
	// The updateNodes() function:
	// - deals with trivial cases
	// - determines whether the lists are keyed or unkeyed based on the first non-null node
	//   of each list.
	// - diffs them and patches the DOM if needed (that's the brunt of the code)
	// - manages the leftovers: after diffing, are there:
	//   - old nodes left to remove?
	// 	 - new nodes to insert?
	// 	 deal with them!
	//
	// The lists are only iterated over once, with an exception for the nodes in `old` that
	// are visited in the fourth part of the diff and in the `removeNodes` loop.

	// ## Diffing
	//
	// Reading https://github.com/localvoid/ivi/blob/ddc09d06abaef45248e6133f7040d00d3c6be853/packages/ivi/src/vdom/implementation.ts#L617-L837
	// may be good for context on longest increasing subsequence-based logic for moving nodes.
	//
	// In order to diff keyed lists, one has to
	//
	// 1) match nodes in both lists, per key, and update them accordingly
	// 2) create the nodes present in the new list, but absent in the old one
	// 3) remove the nodes present in the old list, but absent in the new one
	// 4) figure out what nodes in 1) to move in order to minimize the DOM operations.
	//
	// To achieve 1) one can create a dictionary of keys => index (for the old list), then iterate
	// over the new list and for each new vnode, find the corresponding vnode in the old list using
	// the map.
	// 2) is achieved in the same step: if a new node has no corresponding entry in the map, it is new
	// and must be created.
	// For the removals, we actually remove the nodes that have been updated from the old list.
	// The nodes that remain in that list after 1) and 2) have been performed can be safely removed.
	// The fourth step is a bit more complex and relies on the longest increasing subsequence (LIS)
	// algorithm.
	//
	// the longest increasing subsequence is the list of nodes that can remain in place. Imagine going
	// from `1,2,3,4,5` to `4,5,1,2,3` where the numbers are not necessarily the keys, but the indices
	// corresponding to the keyed nodes in the old list (keyed nodes `e,d,c,b,a` => `b,a,e,d,c` would
	//  match the above lists, for example).
	//
	// In there are two increasing subsequences: `4,5` and `1,2,3`, the latter being the longest. We
	// can update those nodes without moving them, and only call `insertNode` on `4` and `5`.
	//
	// @localvoid adapted the algo to also support node deletions and insertions (the `lis` is actually
	// the longest increasing subsequence *of old nodes still present in the new list*).
	//
	// It is a general algorithm that is fireproof in all circumstances, but it requires the allocation
	// and the construction of a `key => oldIndex` map, and three arrays (one with `newIndex => oldIndex`,
	// the `LIS` and a temporary one to create the LIS).
	//
	// So we cheat where we can: if the tails of the lists are identical, they are guaranteed to be part of
	// the LIS and can be updated without moving them.
	//
	// If two nodes are swapped, they are guaranteed not to be part of the LIS, and must be moved (with
	// the exception of the last node if the list is fully reversed).
	//
	// ## Finding the next sibling.
	//
	// `updateNode()` and `createNode()` expect a nextSibling parameter to perform DOM operations.
	// When the list is being traversed top-down, at any index, the DOM nodes up to the previous
	// vnode reflect the content of the new list, whereas the rest of the DOM nodes reflect the old
	// list. The next sibling must be looked for in the old list using `getNextSibling(... oldStart + 1 ...)`.
	//
	// In the other scenarios (swaps, upwards traversal, map-based diff),
	// the new vnodes list is traversed upwards. The DOM nodes at the bottom of the list reflect the
	// bottom part of the new vnodes list, and we can use the `v.dom`  value of the previous node
	// as the next sibling (cached in the `nextSibling` variable).


	// ## DOM node moves
	//
	// In most scenarios `updateNode()` and `createNode()` perform the DOM operations. However,
	// this is not the case if the node moved (second and fourth part of the diff algo). We move
	// the old DOM nodes before updateNode runs because it enables us to use the cached `nextSibling`
	// variable rather than fetching it using `getNextSibling()`.
	//
	// The fourth part of the diff currently inserts nodes unconditionally, leading to issues
	// like #1791 and #1999. We need to be smarter about those situations where adjascent old
	// nodes remain together in the new list in a way that isn't covered by parts one and
	// three of the diff algo.

	function updateNodes(parent, old, vnodes, hooks, nextSibling, ns) {
		if (old === vnodes || old == null && vnodes == null) return
		else if (old == null || old.length === 0) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)
		else if (vnodes == null || vnodes.length === 0) removeNodes(parent, old, 0, old.length)
		else {
			var isOldKeyed = old[0] != null && old[0].key != null
			var isKeyed = vnodes[0] != null && vnodes[0].key != null
			var start = 0, oldStart = 0
			if (!isOldKeyed) while (oldStart < old.length && old[oldStart] == null) oldStart++
			if (!isKeyed) while (start < vnodes.length && vnodes[start] == null) start++
			if (isKeyed === null && isOldKeyed == null) return // both lists are full of nulls
			if (isOldKeyed !== isKeyed) {
				removeNodes(parent, old, oldStart, old.length)
				createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns)
			} else if (!isKeyed) {
				// Don't index past the end of either list (causes deopts).
				var commonLength = old.length < vnodes.length ? old.length : vnodes.length
				// Rewind if necessary to the first non-null index on either side.
				// We could alternatively either explicitly create or remove nodes when `start !== oldStart`
				// but that would be optimizing for sparse lists which are more rare than dense ones.
				start = start < oldStart ? start : oldStart
				for (; start < commonLength; start++) {
					o = old[start]
					v = vnodes[start]
					if (o === v || o == null && v == null) continue
					else if (o == null) createNode(parent, v, hooks, ns, getNextSibling(old, start + 1, nextSibling))
					else if (v == null) removeNode(parent, o)
					else updateNode(parent, o, v, hooks, getNextSibling(old, start + 1, nextSibling), ns)
				}
				if (old.length > commonLength) removeNodes(parent, old, start, old.length)
				if (vnodes.length > commonLength) createNodes(parent, vnodes, start, vnodes.length, hooks, nextSibling, ns)
			} else {
				// keyed diff
				var oldEnd = old.length - 1, end = vnodes.length - 1, map, o, v, oe, ve, topSibling

				// bottom-up
				while (oldEnd >= oldStart && end >= start) {
					oe = old[oldEnd]
					ve = vnodes[end]
					if (oe.key !== ve.key) break
					if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)
					if (ve.dom != null) nextSibling = ve.dom
					oldEnd--, end--
				}
				// top-down
				while (oldEnd >= oldStart && end >= start) {
					o = old[oldStart]
					v = vnodes[start]
					if (o.key !== v.key) break
					oldStart++, start++
					if (o !== v) updateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), ns)
				}
				// swaps and list reversals
				while (oldEnd >= oldStart && end >= start) {
					if (start === end) break
					if (o.key !== ve.key || oe.key !== v.key) break
					topSibling = getNextSibling(old, oldStart, nextSibling)
					moveNodes(parent, oe, topSibling)
					if (oe !== v) updateNode(parent, oe, v, hooks, topSibling, ns)
					if (++start <= --end) moveNodes(parent, o, nextSibling)
					if (o !== ve) updateNode(parent, o, ve, hooks, nextSibling, ns)
					if (ve.dom != null) nextSibling = ve.dom
					oldStart++; oldEnd--
					oe = old[oldEnd]
					ve = vnodes[end]
					o = old[oldStart]
					v = vnodes[start]
				}
				// bottom up once again
				while (oldEnd >= oldStart && end >= start) {
					if (oe.key !== ve.key) break
					if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)
					if (ve.dom != null) nextSibling = ve.dom
					oldEnd--, end--
					oe = old[oldEnd]
					ve = vnodes[end]
				}
				if (start > end) removeNodes(parent, old, oldStart, oldEnd + 1)
				else if (oldStart > oldEnd) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)
				else {
					// inspired by ivi https://github.com/ivijs/ivi/ by Boris Kaul
					var originalNextSibling = nextSibling, vnodesLength = end - start + 1, oldIndices = new Array(vnodesLength), li=0, i=0, pos = 2147483647, matched = 0, map, lisIndices
					for (i = 0; i < vnodesLength; i++) oldIndices[i] = -1
					for (i = end; i >= start; i--) {
						if (map == null) map = getKeyMap(old, oldStart, oldEnd + 1)
						ve = vnodes[i]
						var oldIndex = map[ve.key]
						if (oldIndex != null) {
							pos = (oldIndex < pos) ? oldIndex : -1 // becomes -1 if nodes were re-ordered
							oldIndices[i-start] = oldIndex
							oe = old[oldIndex]
							old[oldIndex] = null
							if (oe !== ve) updateNode(parent, oe, ve, hooks, nextSibling, ns)
							if (ve.dom != null) nextSibling = ve.dom
							matched++
						}
					}
					nextSibling = originalNextSibling
					if (matched !== oldEnd - oldStart + 1) removeNodes(parent, old, oldStart, oldEnd + 1)
					if (matched === 0) createNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)
					else {
						if (pos === -1) {
							// the indices of the indices of the items that are part of the
							// longest increasing subsequence in the oldIndices list
							lisIndices = makeLisIndices(oldIndices)
							li = lisIndices.length - 1
							for (i = end; i >= start; i--) {
								v = vnodes[i]
								if (oldIndices[i-start] === -1) createNode(parent, v, hooks, ns, nextSibling)
								else {
									if (lisIndices[li] === i - start) li--
									else moveNodes(parent, v, nextSibling)
								}
								if (v.dom != null) nextSibling = vnodes[i].dom
							}
						} else {
							for (i = end; i >= start; i--) {
								v = vnodes[i]
								if (oldIndices[i-start] === -1) createNode(parent, v, hooks, ns, nextSibling)
								if (v.dom != null) nextSibling = vnodes[i].dom
							}
						}
					}
				}
			}
		}
	}
	function updateNode(parent, old, vnode, hooks, nextSibling, ns) {
		var oldTag = old.tag, tag = vnode.tag
		if (oldTag === tag) {
			vnode.state = old.state
			vnode.events = old.events
			if (shouldNotUpdate(vnode, old)) return
			if (typeof oldTag === "string") {
				if (vnode.attrs != null) {
					updateLifecycle(vnode.attrs, vnode, hooks)
				}
				switch (oldTag) {
					case "#": updateText(old, vnode); break
					case "<": updateHTML(parent, old, vnode, ns, nextSibling); break
					case "[": updateFragment(parent, old, vnode, hooks, nextSibling, ns); break
					default: updateElement(old, vnode, hooks, ns)
				}
			}
			else updateComponent(parent, old, vnode, hooks, nextSibling, ns)
		}
		else {
			removeNode(parent, old)
			createNode(parent, vnode, hooks, ns, nextSibling)
		}
	}
	function updateText(old, vnode) {
		if (old.children.toString() !== vnode.children.toString()) {
			old.dom.nodeValue = vnode.children
		}
		vnode.dom = old.dom
	}
	function updateHTML(parent, old, vnode, ns, nextSibling) {
		if (old.children !== vnode.children) {
			removeHTML(parent, old)
			createHTML(parent, vnode, ns, nextSibling)
		}
		else {
			vnode.dom = old.dom
			vnode.domSize = old.domSize
			vnode.instance = old.instance
		}
	}
	function updateFragment(parent, old, vnode, hooks, nextSibling, ns) {
		updateNodes(parent, old.children, vnode.children, hooks, nextSibling, ns)
		var domSize = 0, children = vnode.children
		vnode.dom = null
		if (children != null) {
			for (var i = 0; i < children.length; i++) {
				var child = children[i]
				if (child != null && child.dom != null) {
					if (vnode.dom == null) vnode.dom = child.dom
					domSize += child.domSize || 1
				}
			}
			if (domSize !== 1) vnode.domSize = domSize
		}
	}
	function updateElement(old, vnode, hooks, ns) {
		var element = vnode.dom = old.dom
		ns = getNameSpace(vnode) || ns

		if (vnode.tag === "textarea") {
			if (vnode.attrs == null) vnode.attrs = {}
			if (vnode.text != null) {
				vnode.attrs.value = vnode.text //FIXME handle multiple children
				vnode.text = undefined
			}
		}
		updateAttrs(vnode, old.attrs, vnode.attrs, ns)
		if (!maybeSetContentEditable(vnode)) {
			if (old.text != null && vnode.text != null && vnode.text !== "") {
				if (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text
			}
			else {
				if (old.text != null) old.children = [Vnode("#", undefined, undefined, old.text, undefined, old.dom.firstChild)]
				if (vnode.text != null) vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]
				updateNodes(element, old.children, vnode.children, hooks, null, ns)
			}
		}
	}
	function updateComponent(parent, old, vnode, hooks, nextSibling, ns) {
		vnode.instance = Vnode.normalize(callHook.call(vnode.state.view, vnode))
		if (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")
		updateLifecycle(vnode.state, vnode, hooks)
		if (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)
		if (vnode.instance != null) {
			if (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)
			else updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, ns)
			vnode.dom = vnode.instance.dom
			vnode.domSize = vnode.instance.domSize
		}
		else if (old.instance != null) {
			removeNode(parent, old.instance)
			vnode.dom = undefined
			vnode.domSize = 0
		}
		else {
			vnode.dom = old.dom
			vnode.domSize = old.domSize
		}
	}
	function getKeyMap(vnodes, start, end) {
		var map = Object.create(null)
		for (; start < end; start++) {
			var vnode = vnodes[start]
			if (vnode != null) {
				var key = vnode.key
				if (key != null) map[key] = start
			}
		}
		return map
	}
	// Lifted from ivi https://github.com/ivijs/ivi/
	// takes a list of unique numbers (-1 is special and can
	// occur multiple times) and returns an array with the indices
	// of the items that are part of the longest increasing
	// subsequece
	var lisTemp = []
	function makeLisIndices(a) {
		var result = [0]
		var u = 0, v = 0, i = 0
		var il = lisTemp.length = a.length
		for (var i = 0; i < il; i++) lisTemp[i] = a[i]
		for (var i = 0; i < il; ++i) {
			if (a[i] === -1) continue
			var j = result[result.length - 1]
			if (a[j] < a[i]) {
				lisTemp[i] = j
				result.push(i)
				continue
			}
			u = 0
			v = result.length - 1
			while (u < v) {
				// Fast integer average without overflow.
				// eslint-disable-next-line no-bitwise
				var c = (u >>> 1) + (v >>> 1) + (u & v & 1)
				if (a[result[c]] < a[i]) {
					u = c + 1
				}
				else {
					v = c
				}
			}
			if (a[i] < a[result[u]]) {
				if (u > 0) lisTemp[i] = result[u - 1]
				result[u] = i
			}
		}
		u = result.length
		v = result[u - 1]
		while (u-- > 0) {
			result[u] = v
			v = lisTemp[v]
		}
		lisTemp.length = 0
		return result
	}

	function getNextSibling(vnodes, i, nextSibling) {
		for (; i < vnodes.length; i++) {
			if (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom
		}
		return nextSibling
	}

	// This covers a really specific edge case:
	// - Parent node is keyed and contains child
	// - Child is removed, returns unresolved promise in `onbeforeremove`
	// - Parent node is moved in keyed diff
	// - Remaining children still need moved appropriately
	//
	// Ideally, I'd track removed nodes as well, but that introduces a lot more
	// complexity and I'm not exactly interested in doing that.
	function moveNodes(parent, vnode, nextSibling) {
		var frag = $doc.createDocumentFragment()
		moveChildToFrag(parent, frag, vnode)
		insertNode(parent, frag, nextSibling)
	}
	function moveChildToFrag(parent, frag, vnode) {
		// Dodge the recursion overhead in a few of the most common cases.
		while (vnode.dom != null && vnode.dom.parentNode === parent) {
			if (typeof vnode.tag !== "string") {
				vnode = vnode.instance
				if (vnode != null) continue
			} else if (vnode.tag === "<") {
				for (var i = 0; i < vnode.instance.length; i++) {
					frag.appendChild(vnode.instance[i])
				}
			} else if (vnode.tag !== "[") {
				// Don't recurse for text nodes *or* elements, just fragments
				frag.appendChild(vnode.dom)
			} else if (vnode.children.length === 1) {
				vnode = vnode.children[0]
				if (vnode != null) continue
			} else {
				for (var i = 0; i < vnode.children.length; i++) {
					var child = vnode.children[i]
					if (child != null) moveChildToFrag(parent, frag, child)
				}
			}
			break
		}
	}

	function insertNode(parent, dom, nextSibling) {
		if (nextSibling != null) parent.insertBefore(dom, nextSibling)
		else parent.appendChild(dom)
	}

	function maybeSetContentEditable(vnode) {
		if (vnode.attrs == null || (
			vnode.attrs.contenteditable == null && // attribute
			vnode.attrs.contentEditable == null // property
		)) return false
		var children = vnode.children
		if (children != null && children.length === 1 && children[0].tag === "<") {
			var content = children[0].children
			if (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content
		}
		else if (vnode.text != null || children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted")
		return true
	}

	//remove
	function removeNodes(parent, vnodes, start, end) {
		for (var i = start; i < end; i++) {
			var vnode = vnodes[i]
			if (vnode != null) removeNode(parent, vnode)
		}
	}
	function removeNode(parent, vnode) {
		var mask = 0
		var original = vnode.state
		var stateResult, attrsResult
		if (typeof vnode.tag !== "string" && typeof vnode.state.onbeforeremove === "function") {
			var result = callHook.call(vnode.state.onbeforeremove, vnode)
			if (result != null && typeof result.then === "function") {
				mask = 1
				stateResult = result
			}
		}
		if (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {
			var result = callHook.call(vnode.attrs.onbeforeremove, vnode)
			if (result != null && typeof result.then === "function") {
				// eslint-disable-next-line no-bitwise
				mask |= 2
				attrsResult = result
			}
		}
		checkState(vnode, original)

		// If we can, try to fast-path it and avoid all the overhead of awaiting
		if (!mask) {
			onremove(vnode)
			removeChild(parent, vnode)
		} else {
			if (stateResult != null) {
				var next = function () {
					// eslint-disable-next-line no-bitwise
					if (mask & 1) { mask &= 2; if (!mask) reallyRemove() }
				}
				stateResult.then(next, next)
			}
			if (attrsResult != null) {
				var next = function () {
					// eslint-disable-next-line no-bitwise
					if (mask & 2) { mask &= 1; if (!mask) reallyRemove() }
				}
				attrsResult.then(next, next)
			}
		}

		function reallyRemove() {
			checkState(vnode, original)
			onremove(vnode)
			removeChild(parent, vnode)
		}
	}
	function removeHTML(parent, vnode) {
		for (var i = 0; i < vnode.instance.length; i++) {
			parent.removeChild(vnode.instance[i])
		}
	}
	function removeChild(parent, vnode) {
		// Dodge the recursion overhead in a few of the most common cases.
		while (vnode.dom != null && vnode.dom.parentNode === parent) {
			if (typeof vnode.tag !== "string") {
				vnode = vnode.instance
				if (vnode != null) continue
			} else if (vnode.tag === "<") {
				removeHTML(parent, vnode)
			} else {
				if (vnode.tag !== "[") {
					parent.removeChild(vnode.dom)
					if (!Array.isArray(vnode.children)) break
				}
				if (vnode.children.length === 1) {
					vnode = vnode.children[0]
					if (vnode != null) continue
				} else {
					for (var i = 0; i < vnode.children.length; i++) {
						var child = vnode.children[i]
						if (child != null) removeChild(parent, child)
					}
				}
			}
			break
		}
	}
	function onremove(vnode) {
		if (typeof vnode.tag !== "string" && typeof vnode.state.onremove === "function") callHook.call(vnode.state.onremove, vnode)
		if (vnode.attrs && typeof vnode.attrs.onremove === "function") callHook.call(vnode.attrs.onremove, vnode)
		if (typeof vnode.tag !== "string") {
			if (vnode.instance != null) onremove(vnode.instance)
		} else {
			var children = vnode.children
			if (Array.isArray(children)) {
				for (var i = 0; i < children.length; i++) {
					var child = children[i]
					if (child != null) onremove(child)
				}
			}
		}
	}

	//attrs
	function setAttrs(vnode, attrs, ns) {
		for (var key in attrs) {
			setAttr(vnode, key, null, attrs[key], ns)
		}
	}
	function setAttr(vnode, key, old, value, ns) {
		if (key === "key" || key === "is" || value == null || isLifecycleMethod(key) || (old === value && !isFormAttribute(vnode, key)) && typeof value !== "object") return
		if (key[0] === "o" && key[1] === "n") return updateEvent(vnode, key, value)
		if (key.slice(0, 6) === "xlink:") vnode.dom.setAttributeNS("http://www.w3.org/1999/xlink", key.slice(6), value)
		else if (key === "style") updateStyle(vnode.dom, old, value)
		else if (hasPropertyKey(vnode, key, ns)) {
			if (key === "value") {
				// Only do the coercion if we're actually going to check the value.
				/* eslint-disable no-implicit-coercion */
				//setting input[value] to same value by typing on focused element moves cursor to end in Chrome
				if ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === "" + value && vnode.dom === activeElement()) return
				//setting select[value] to same value while having select open blinks select dropdown in Chrome
				if (vnode.tag === "select" && old !== null && vnode.dom.value === "" + value) return
				//setting option[value] to same value while having select open blinks select dropdown in Chrome
				if (vnode.tag === "option" && old !== null && vnode.dom.value === "" + value) return
				/* eslint-enable no-implicit-coercion */
			}
			// If you assign an input type that is not supported by IE 11 with an assignment expression, an error will occur.
			if (vnode.tag === "input" && key === "type") vnode.dom.setAttribute(key, value)
			else vnode.dom[key] = value
		} else {
			if (typeof value === "boolean") {
				if (value) vnode.dom.setAttribute(key, "")
				else vnode.dom.removeAttribute(key)
			}
			else vnode.dom.setAttribute(key === "className" ? "class" : key, value)
		}
	}
	function removeAttr(vnode, key, old, ns) {
		if (key === "key" || key === "is" || old == null || isLifecycleMethod(key)) return
		if (key[0] === "o" && key[1] === "n" && !isLifecycleMethod(key)) updateEvent(vnode, key, undefined)
		else if (key === "style") updateStyle(vnode.dom, old, null)
		else if (
			hasPropertyKey(vnode, key, ns)
			&& key !== "className"
			&& !(key === "value" && (
				vnode.tag === "option"
				|| vnode.tag === "select" && vnode.dom.selectedIndex === -1 && vnode.dom === activeElement()
			))
			&& !(vnode.tag === "input" && key === "type")
		) {
			vnode.dom[key] = null
		} else {
			var nsLastIndex = key.indexOf(":")
			if (nsLastIndex !== -1) key = key.slice(nsLastIndex + 1)
			if (old !== false) vnode.dom.removeAttribute(key === "className" ? "class" : key)
		}
	}
	function setLateSelectAttrs(vnode, attrs) {
		if ("value" in attrs) {
			if(attrs.value === null) {
				if (vnode.dom.selectedIndex !== -1) vnode.dom.value = null
			} else {
				var normalized = "" + attrs.value // eslint-disable-line no-implicit-coercion
				if (vnode.dom.value !== normalized || vnode.dom.selectedIndex === -1) {
					vnode.dom.value = normalized
				}
			}
		}
		if ("selectedIndex" in attrs) setAttr(vnode, "selectedIndex", null, attrs.selectedIndex, undefined)
	}
	function updateAttrs(vnode, old, attrs, ns) {
		if (attrs != null) {
			for (var key in attrs) {
				setAttr(vnode, key, old && old[key], attrs[key], ns)
			}
		}
		var val
		if (old != null) {
			for (var key in old) {
				if (((val = old[key]) != null) && (attrs == null || attrs[key] == null)) {
					removeAttr(vnode, key, val, ns)
				}
			}
		}
	}
	function isFormAttribute(vnode, attr) {
		return attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === activeElement() || vnode.tag === "option" && vnode.dom.parentNode === $doc.activeElement
	}
	function isLifecycleMethod(attr) {
		return attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate"
	}
	function hasPropertyKey(vnode, key, ns) {
		// Filter out namespaced keys
		return ns === undefined && (
			// If it's a custom element, just keep it.
			vnode.tag.indexOf("-") > -1 || vnode.attrs != null && vnode.attrs.is ||
			// If it's a normal element, let's try to avoid a few browser bugs.
			key !== "href" && key !== "list" && key !== "form" && key !== "width" && key !== "height"// && key !== "type"
			// Defer the property check until *after* we check everything.
		) && key in vnode.dom
	}

	//style
	var uppercaseRegex = /[A-Z]/g
	function toLowerCase(capital) { return "-" + capital.toLowerCase() }
	function normalizeKey(key) {
		return key[0] === "-" && key[1] === "-" ? key :
			key === "cssFloat" ? "float" :
				key.replace(uppercaseRegex, toLowerCase)
	}
	function updateStyle(element, old, style) {
		if (old === style) {
			// Styles are equivalent, do nothing.
		} else if (style == null) {
			// New style is missing, just clear it.
			element.style.cssText = ""
		} else if (typeof style !== "object") {
			// New style is a string, let engine deal with patching.
			element.style.cssText = style
		} else if (old == null || typeof old !== "object") {
			// `old` is missing or a string, `style` is an object.
			element.style.cssText = ""
			// Add new style properties
			for (var key in style) {
				var value = style[key]
				if (value != null) element.style.setProperty(normalizeKey(key), String(value))
			}
		} else {
			// Both old & new are (different) objects.
			// Update style properties that have changed
			for (var key in style) {
				var value = style[key]
				if (value != null && (value = String(value)) !== String(old[key])) {
					element.style.setProperty(normalizeKey(key), value)
				}
			}
			// Remove style properties that no longer exist
			for (var key in old) {
				if (old[key] != null && style[key] == null) {
					element.style.removeProperty(normalizeKey(key))
				}
			}
		}
	}

	// Here's an explanation of how this works:
	// 1. The event names are always (by design) prefixed by `on`.
	// 2. The EventListener interface accepts either a function or an object
	//    with a `handleEvent` method.
	// 3. The object does not inherit from `Object.prototype`, to avoid
	//    any potential interference with that (e.g. setters).
	// 4. The event name is remapped to the handler before calling it.
	// 5. In function-based event handlers, `ev.target === this`. We replicate
	//    that below.
	// 6. In function-based event handlers, `return false` prevents the default
	//    action and stops event propagation. We replicate that below.
	function EventDict() {
		// Save this, so the current redraw is correctly tracked.
		this._ = currentRedraw
	}
	EventDict.prototype = Object.create(null)
	EventDict.prototype.handleEvent = function (ev) {
		var handler = this["on" + ev.type]
		var result
		if (typeof handler === "function") result = handler.call(ev.currentTarget, ev)
		else if (typeof handler.handleEvent === "function") handler.handleEvent(ev)
		if (this._ && ev.redraw !== false) (0, this._)()
		if (result === false) {
			ev.preventDefault()
			ev.stopPropagation()
		}
	}

	//event
	function updateEvent(vnode, key, value) {
		if (vnode.events != null) {
			if (vnode.events[key] === value) return
			if (value != null && (typeof value === "function" || typeof value === "object")) {
				if (vnode.events[key] == null) vnode.dom.addEventListener(key.slice(2), vnode.events, false)
				vnode.events[key] = value
			} else {
				if (vnode.events[key] != null) vnode.dom.removeEventListener(key.slice(2), vnode.events, false)
				vnode.events[key] = undefined
			}
		} else if (value != null && (typeof value === "function" || typeof value === "object")) {
			vnode.events = new EventDict()
			vnode.dom.addEventListener(key.slice(2), vnode.events, false)
			vnode.events[key] = value
		}
	}

	//lifecycle
	function initLifecycle(source, vnode, hooks) {
		if (typeof source.oninit === "function") callHook.call(source.oninit, vnode)
		if (typeof source.oncreate === "function") hooks.push(callHook.bind(source.oncreate, vnode))
	}
	function updateLifecycle(source, vnode, hooks) {
		if (typeof source.onupdate === "function") hooks.push(callHook.bind(source.onupdate, vnode))
	}
	function shouldNotUpdate(vnode, old) {
		do {
			if (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") {
				var force = callHook.call(vnode.attrs.onbeforeupdate, vnode, old)
				if (force !== undefined && !force) break
			}
			if (typeof vnode.tag !== "string" && typeof vnode.state.onbeforeupdate === "function") {
				var force = callHook.call(vnode.state.onbeforeupdate, vnode, old)
				if (force !== undefined && !force) break
			}
			return false
		} while (false); // eslint-disable-line no-constant-condition
		vnode.dom = old.dom
		vnode.domSize = old.domSize
		vnode.instance = old.instance
		// One would think having the actual latest attributes would be ideal,
		// but it doesn't let us properly diff based on our current internal
		// representation. We have to save not only the old DOM info, but also
		// the attributes used to create it, as we diff *that*, not against the
		// DOM directly (with a few exceptions in `setAttr`). And, of course, we
		// need to save the children and text as they are conceptually not
		// unlike special "attributes" internally.
		vnode.attrs = old.attrs
		vnode.children = old.children
		vnode.text = old.text
		return true
	}

	return function(dom, vnodes, redraw) {
		if (!dom) throw new TypeError("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.")
		var hooks = []
		var active = activeElement()
		var namespace = dom.namespaceURI

		// First time rendering into a node clears it out
		if (dom.vnodes == null) dom.textContent = ""

		vnodes = Vnode.normalizeChildren(Array.isArray(vnodes) ? vnodes : [vnodes])
		var prevRedraw = currentRedraw
		try {
			currentRedraw = typeof redraw === "function" ? redraw : undefined
			updateNodes(dom, dom.vnodes, vnodes, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace)
		} finally {
			currentRedraw = prevRedraw
		}
		dom.vnodes = vnodes
		// `document.activeElement` can return null: https://html.spec.whatwg.org/multipage/interaction.html#dom-document-activeelement
		if (active != null && activeElement() !== active && typeof active.focus === "function") active.focus()
		for (var i = 0; i < hooks.length; i++) hooks[i]()
	}
}


/***/ }),

/***/ "./node_modules/mithril/render/trust.js":
/*!**********************************************!*\
  !*** ./node_modules/mithril/render/trust.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var Vnode = __webpack_require__(/*! ../render/vnode */ "./node_modules/mithril/render/vnode.js")

module.exports = function(html) {
	if (html == null) html = ""
	return Vnode("<", undefined, undefined, html, undefined, undefined)
}


/***/ }),

/***/ "./node_modules/mithril/render/vnode.js":
/*!**********************************************!*\
  !*** ./node_modules/mithril/render/vnode.js ***!
  \**********************************************/
/***/ ((module) => {



function Vnode(tag, key, attrs, children, text, dom) {
	return {tag: tag, key: key, attrs: attrs, children: children, text: text, dom: dom, domSize: undefined, state: undefined, events: undefined, instance: undefined}
}
Vnode.normalize = function(node) {
	if (Array.isArray(node)) return Vnode("[", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)
	if (node == null || typeof node === "boolean") return null
	if (typeof node === "object") return node
	return Vnode("#", undefined, undefined, String(node), undefined, undefined)
}
Vnode.normalizeChildren = function(input) {
	var children = []
	if (input.length) {
		var isKeyed = input[0] != null && input[0].key != null
		// Note: this is a *very* perf-sensitive check.
		// Fun fact: merging the loop like this is somehow faster than splitting
		// it, noticeably so.
		for (var i = 1; i < input.length; i++) {
			if ((input[i] != null && input[i].key != null) !== isKeyed) {
				throw new TypeError("Vnodes must either always have keys or never have keys!")
			}
		}
		for (var i = 0; i < input.length; i++) {
			children[i] = Vnode.normalize(input[i])
		}
	}
	return children
}

module.exports = Vnode


/***/ }),

/***/ "./node_modules/mithril/request.js":
/*!*****************************************!*\
  !*** ./node_modules/mithril/request.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var PromisePolyfill = __webpack_require__(/*! ./promise/promise */ "./node_modules/mithril/promise/promise.js")
var mountRedraw = __webpack_require__(/*! ./mount-redraw */ "./node_modules/mithril/mount-redraw.js")

module.exports = __webpack_require__(/*! ./request/request */ "./node_modules/mithril/request/request.js")(window, PromisePolyfill, mountRedraw.redraw)


/***/ }),

/***/ "./node_modules/mithril/request/request.js":
/*!*************************************************!*\
  !*** ./node_modules/mithril/request/request.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var buildPathname = __webpack_require__(/*! ../pathname/build */ "./node_modules/mithril/pathname/build.js")

module.exports = function($window, Promise, oncompletion) {
	var callbackCount = 0

	function PromiseProxy(executor) {
		return new Promise(executor)
	}

	// In case the global Promise is some userland library's where they rely on
	// `foo instanceof this.constructor`, `this.constructor.resolve(value)`, or
	// similar. Let's *not* break them.
	PromiseProxy.prototype = Promise.prototype
	PromiseProxy.__proto__ = Promise // eslint-disable-line no-proto

	function makeRequest(factory) {
		return function(url, args) {
			if (typeof url !== "string") { args = url; url = url.url }
			else if (args == null) args = {}
			var promise = new Promise(function(resolve, reject) {
				factory(buildPathname(url, args.params), args, function (data) {
					if (typeof args.type === "function") {
						if (Array.isArray(data)) {
							for (var i = 0; i < data.length; i++) {
								data[i] = new args.type(data[i])
							}
						}
						else data = new args.type(data)
					}
					resolve(data)
				}, reject)
			})
			if (args.background === true) return promise
			var count = 0
			function complete() {
				if (--count === 0 && typeof oncompletion === "function") oncompletion()
			}

			return wrap(promise)

			function wrap(promise) {
				var then = promise.then
				// Set the constructor, so engines know to not await or resolve
				// this as a native promise. At the time of writing, this is
				// only necessary for V8, but their behavior is the correct
				// behavior per spec. See this spec issue for more details:
				// https://github.com/tc39/ecma262/issues/1577. Also, see the
				// corresponding comment in `request/tests/test-request.js` for
				// a bit more background on the issue at hand.
				promise.constructor = PromiseProxy
				promise.then = function() {
					count++
					var next = then.apply(promise, arguments)
					next.then(complete, function(e) {
						complete()
						if (count === 0) throw e
					})
					return wrap(next)
				}
				return promise
			}
		}
	}

	function hasHeader(args, name) {
		for (var key in args.headers) {
			if ({}.hasOwnProperty.call(args.headers, key) && name.test(key)) return true
		}
		return false
	}

	return {
		request: makeRequest(function(url, args, resolve, reject) {
			var method = args.method != null ? args.method.toUpperCase() : "GET"
			var body = args.body
			var assumeJSON = (args.serialize == null || args.serialize === JSON.serialize) && !(body instanceof $window.FormData)
			var responseType = args.responseType || (typeof args.extract === "function" ? "" : "json")

			var xhr = new $window.XMLHttpRequest(), aborted = false
			var original = xhr, replacedAbort
			var abort = xhr.abort

			xhr.abort = function() {
				aborted = true
				abort.call(this)
			}

			xhr.open(method, url, args.async !== false, typeof args.user === "string" ? args.user : undefined, typeof args.password === "string" ? args.password : undefined)

			if (assumeJSON && body != null && !hasHeader(args, /^content-type$/i)) {
				xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8")
			}
			if (typeof args.deserialize !== "function" && !hasHeader(args, /^accept$/i)) {
				xhr.setRequestHeader("Accept", "application/json, text/*")
			}
			if (args.withCredentials) xhr.withCredentials = args.withCredentials
			if (args.timeout) xhr.timeout = args.timeout
			xhr.responseType = responseType

			for (var key in args.headers) {
				if ({}.hasOwnProperty.call(args.headers, key)) {
					xhr.setRequestHeader(key, args.headers[key])
				}
			}

			xhr.onreadystatechange = function(ev) {
				// Don't throw errors on xhr.abort().
				if (aborted) return

				if (ev.target.readyState === 4) {
					try {
						var success = (ev.target.status >= 200 && ev.target.status < 300) || ev.target.status === 304 || (/^file:\/\//i).test(url)
						// When the response type isn't "" or "text",
						// `xhr.responseText` is the wrong thing to use.
						// Browsers do the right thing and throw here, and we
						// should honor that and do the right thing by
						// preferring `xhr.response` where possible/practical.
						var response = ev.target.response, message

						if (responseType === "json") {
							// For IE and Edge, which don't implement
							// `responseType: "json"`.
							if (!ev.target.responseType && typeof args.extract !== "function") response = JSON.parse(ev.target.responseText)
						} else if (!responseType || responseType === "text") {
							// Only use this default if it's text. If a parsed
							// document is needed on old IE and friends (all
							// unsupported), the user should use a custom
							// `config` instead. They're already using this at
							// their own risk.
							if (response == null) response = ev.target.responseText
						}

						if (typeof args.extract === "function") {
							response = args.extract(ev.target, args)
							success = true
						} else if (typeof args.deserialize === "function") {
							response = args.deserialize(response)
						}
						if (success) resolve(response)
						else {
							try { message = ev.target.responseText }
							catch (e) { message = response }
							var error = new Error(message)
							error.code = ev.target.status
							error.response = response
							reject(error)
						}
					}
					catch (e) {
						reject(e)
					}
				}
			}

			if (typeof args.config === "function") {
				xhr = args.config(xhr, args, url) || xhr

				// Propagate the `abort` to any replacement XHR as well.
				if (xhr !== original) {
					replacedAbort = xhr.abort
					xhr.abort = function() {
						aborted = true
						replacedAbort.call(this)
					}
				}
			}

			if (body == null) xhr.send()
			else if (typeof args.serialize === "function") xhr.send(args.serialize(body))
			else if (body instanceof $window.FormData) xhr.send(body)
			else xhr.send(JSON.stringify(body))
		}),
		jsonp: makeRequest(function(url, args, resolve, reject) {
			var callbackName = args.callbackName || "_mithril_" + Math.round(Math.random() * 1e16) + "_" + callbackCount++
			var script = $window.document.createElement("script")
			$window[callbackName] = function(data) {
				delete $window[callbackName]
				script.parentNode.removeChild(script)
				resolve(data)
			}
			script.onerror = function() {
				delete $window[callbackName]
				script.parentNode.removeChild(script)
				reject(new Error("JSONP request failed"))
			}
			script.src = url + (url.indexOf("?") < 0 ? "?" : "&") +
				encodeURIComponent(args.callbackKey || "callback") + "=" +
				encodeURIComponent(callbackName)
			$window.document.documentElement.appendChild(script)
		}),
	}
}


/***/ }),

/***/ "./node_modules/mithril/route.js":
/*!***************************************!*\
  !*** ./node_modules/mithril/route.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var mountRedraw = __webpack_require__(/*! ./mount-redraw */ "./node_modules/mithril/mount-redraw.js")

module.exports = __webpack_require__(/*! ./api/router */ "./node_modules/mithril/api/router.js")(window, mountRedraw)


/***/ }),

/***/ "./www/js/models/artmodel.js":
/*!***********************************!*\
  !*** ./www/js/models/artmodel.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _src_obst_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/obst.js */ "./www/src/obst.js");





// let smithApi_key = "9ae4eb33625dd7715decd18150823461";
let smithAuthToken = "d3a2cd1e4fb11f8d845a5f6eff6c697e";
let smithArray = [];
let metArray = [];
let randSmith;  //keep track if image was random due to no search findings
let randMet;
let obstrat;

let getObstrat = function() {
    let number = Math.floor(Math.random() * _src_obst_js__WEBPACK_IMPORTED_MODULE_1__.default.strategies.length);

    artmodel.obstrat = _src_obst_js__WEBPACK_IMPORTED_MODULE_1__.default.strategies[number];
    return obstrat;
};

let getArt = function(searchTerms) {
    artmodel.randSmith = false;
    artmodel.randMet = false;
    let searchWordList = searchTerms.split("-");

    getSmithsonian(searchWordList[0]);    //get exhibit object with data
    getMet(searchWordList[1]);
    return searchWordList;
};

let getRandomSmith = function() {
    let url = encodeURIComponent("http://www.colourlovers.com/api/patterns/random");

    mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
        method: "GET",
        url: `https://xml-proxy.emilfolino.se/${url}`,
    })
        .then(function (result) {
            artmodel.randSmith = true;
            artmodel.smithArray.push(result);
            return result;
        });
};
let getRandomMet = function() {
    let url = encodeURIComponent("http://www.colourlovers.com/api/patterns/random");

    mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
        method: "GET",
        url: `https://xml-proxy.emilfolino.se/${url}`,
    })
        .then(function (result) {
            artmodel.randMet = true;
            artmodel.metArray.push(result);
            return result;
        });
};

let getSmithsonian = function(searchWord) {
    mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
        method: "GET",
        url: `https://api.collection.cooperhewitt.org/rest/?\
method=cooperhewitt.search.objects&access_token=\
${smithAuthToken}&query=${searchWord}&has_images=true`,
    })
        .then(function (result) {
            artmodel.smithArray.length = 0; //reset
            if (result.objects.length == 0) {
                getRandomSmith();
                return;
            }
            artmodel.smithArray.push(result);
            return result;
        });
};

let getMet = function (searchWord) {
    mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
        method: "GET",
        url: `https://collectionapi.metmuseum.org\
/public/collection/v1/search?hasImages=true&q=${searchWord}`,
    })
        .then(function (result) {
            artmodel.metArray.length = 0;   //reset
            if (result.total == 0) {
                getRandomMet();
                return;
            }
            let number = Math.floor(Math.random() * result.objectIDs.length);

            return getMetImg(result.objectIDs[number]);
        });
};

let getMetImg = function(objectID) {
    mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
        method: "GET",
        url: `https://collectionapi.metmuseum.org/public/collection/v1/objects/${objectID}`
    })
        .then(function (result) {
            artmodel.metArray.push(result);
            return result;
        });
};

let artmodel = {
    randSmith: randSmith,
    randMet: randMet,
    smithArray: smithArray,
    metArray: metArray,
    obstrat: obstrat,
    getObstrat: getObstrat,
    getArt: getArt,
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (artmodel);


/***/ }),

/***/ "./www/js/models/bookmodel.js":
/*!************************************!*\
  !*** ./www/js/models/bookmodel.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _src_top1k__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../src/top1k */ "./www/src/top1k.js");





let apiKey = "AIzaSyAF-fesiUHCSXPVNSoEbePb41_NyfxyQ6s";
let currentBookList = [];
let currentBookImages = []; //image-URLS
let currentWords = [];      //5 random words from API

let runEmergencyBooks = function() {
    currentBookList = [];
    currentBookImages = [];
    let number = Math.floor(Math.random() * 1000);

    getBookshelf(_src_top1k__WEBPACK_IMPORTED_MODULE_1__.default.topwords[number]);
};

let getBookshelf = function(word) {
    currentBookList.length = 0;

    mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
        method: "GET",  //get book titles, filtered for 'fiction'
        url: `https://www.googleapis.com/books/v1/volumes?q=${word}\
+subject:fiction&langRestrict=en&key=${apiKey}`,
    })
        .then(function (result) {
            if (result == undefined) {
                runEmergencyBooks();
                return;
            }
            for (let i = 0; i < 5 && i < result.items.length; i++) {
                if (result.totalItems < 3) { //if too few book found, use emergency word
                    currentBookList.length = 0;
                    currentBookImages.length = 0;
                    let number = Math.floor(Math.random() * 1000);

                    getBookshelf(_src_top1k__WEBPACK_IMPORTED_MODULE_1__.default.topwords[number]);
                    console.log(_src_top1k__WEBPACK_IMPORTED_MODULE_1__.default.topwords[number]);
                    break;
                }

                currentBookList.push(result.items[i].volumeInfo.title);
                try {
                    currentBookImages.push(result.items[i].volumeInfo.imageLinks.thumbnail);
                } catch (TypeError) {
                    console.log(TypeError);
                }
            }
            mithril__WEBPACK_IMPORTED_MODULE_0___default().redraw();
        });
};

let getRandomWord = function() {
    mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
        method: "GET",
        url: `https://random-word-api.herokuapp.com/word?number=5`,
    })
        .then(function () {
            currentWords.length = 0;

            for (let i = 0; i < 5; i++) {  //local dictionary instead, this request can be removed
                let number = Math.floor(Math.random() * 1000);

                currentWords.push(_src_top1k__WEBPACK_IMPORTED_MODULE_1__.default.topwords[number]);
            }
            // for (let i = 0; i < result.length; i++) {
            //     currentWords.push(result[i]);
            // }
        });
};



let bookmodel = {
    getBookshelf: getBookshelf,
    getRandomWord: getRandomWord,
    currentBookList: currentBookList,
    currentWords: currentWords,
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bookmodel);


/***/ }),

/***/ "./www/js/models/savemodel.js":
/*!************************************!*\
  !*** ./www/js/models/savemodel.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _views_archiveview__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../views/archiveview */ "./www/js/views/archiveview.js");





let authKey = "92e9013bdc3040628b5c8921bae43c2c";
var saveData;
var allData;
var currentSaveID;


let savemodel = {
    currentSaveID: currentSaveID,
    saveData: saveData,
    allData: allData,
    email: "",
    password: "",
    token: "",
    msg: "",
    favorited: false,
    fromDetails: false,

    registerUser: function() {
        mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
            url: `https://auth.emilfolino.se/register`,
            body: { email: savemodel.email, password: savemodel.password, api_key: authKey },
            method: 'POST'
        }).then(function (result) {
            // console.log(result);
            savemodel.token = result.data.token;
            savemodel.msg = result.data.message;
            return mithril__WEBPACK_IMPORTED_MODULE_0___default().route.set("/account");
        });
    },

    loginUser: function() {
        mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
            url: "https://auth.emilfolino.se/login",
            body: { email: savemodel.email, password: savemodel.password, api_key: authKey },
            method: 'POST'
        }).then(function (result) {
            savemodel.token = result.data.token;
            savemodel.msg = result.data.message;
            if (savemodel.fromDetails) {
                savemodel.fromDetails = false;
                mithril__WEBPACK_IMPORTED_MODULE_0___default().route.set("/saveview");
            } else {
                mithril__WEBPACK_IMPORTED_MODULE_0___default().route.set("/favoriteview");
            }
        });
    },

    addToFav: function(saveDataFav, imgurURL) {
        savemodel.favorited = true;
        // console.log(saveDataFav);
        let data;

        if (imgurURL !== undefined) {
            data = JSON.stringify({
                "searchWordDisp": saveDataFav[0],
                "smithUrl": saveDataFav[1],
                "metUrl": saveDataFav[2],
                "obstrat": saveDataFav[3],
                "smithAuth": saveDataFav[4],
                "smithYear": saveDataFav[5],
                "smithTitle": saveDataFav[6],
                "metAuth": saveDataFav[7],
                "metYear": saveDataFav[8],
                "metTitle": saveDataFav[9],
                "wiviURL": imgurURL
            });
        } else {
            data = JSON.stringify({
                "searchWordDisp": saveDataFav[0],
                "smithUrl": saveDataFav[1],
                "metUrl": saveDataFav[2],
                "obstrat": saveDataFav[3],
                "smithAuth": saveDataFav[4],
                "smithYear": saveDataFav[5],
                "smithTitle": saveDataFav[6],
                "metAuth": saveDataFav[7],
                "metYear": saveDataFav[8],
                "metTitle": saveDataFav[9],
            });
        }

        mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
            background: true,
            url: "https://auth.emilfolino.se/data",
            body: {
                artefact: data,
                api_key: authKey
            },
            method: 'POST',
            headers: {
                'x-access-token': savemodel.token,
            }
        }).then(function (result) {
            savemodel.msg = result.data.message;
        });
    },

    addImgToFav: function(imgurURL, saveDataFav) {
        let artefact = JSON.stringify({
            "searchWordDisp": saveDataFav[0],
            "smithUrl": saveDataFav[1],
            "metUrl": saveDataFav[2],
            "obstrat": saveDataFav[3],
            "smithAuth": saveDataFav[4],
            "smithYear": saveDataFav[5],
            "smithTitle": saveDataFav[6],
            "metAuth": saveDataFav[7],
            "metYear": saveDataFav[8],
            "metTitle": saveDataFav[9],
            "wiviURL": imgurURL
        });
        
        console.log(imgurURL);
        mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
            url: "https://auth.emilfolino.se/data",
            body: {
                id: savemodel.currentSaveID,
                artefact: artefact,
                api_key: authKey,
            },
            method: 'POST',
            headers: {
                'x-access-token': savemodel.token,
            }
        }).then(function (result) {
            console.log(result);
        });
    },

    getFavs: function() {
        mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
            method: "GET",
            url: `https://auth.emilfolino.se/data?api_key=${authKey}`,
            headers: {
                'x-access-token': savemodel.token
            }
        }).then(function (result) {
            savemodel.allData = result;

            // console.log(savemodel.allData);
            return allData;
        });
    },

    getArchive: function() {        //update albumID on build
        // let testAlbumID = "9lzstbO";
        let trueAlbumID = "Mac86rR";
        let imgurClient = "41dec9efbbede41";

        mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
            method: "GET",
            url: `https://api.imgur.com/3/album/${trueAlbumID}/images`,
            headers: {
                "Authorization": "Client-ID " + imgurClient,
            }
        })
            .then(function (result) {
                _views_archiveview__WEBPACK_IMPORTED_MODULE_1__.default.imageArray = result.data.reverse();
                _views_archiveview__WEBPACK_IMPORTED_MODULE_1__.default.archiveReady = true;
                return result.data;
            });
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (savemodel);


/***/ }),

/***/ "./www/js/views/accountview.js":
/*!*************************************!*\
  !*** ./www/js/views/accountview.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);



let account = {
    view: function() {
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "Account"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.intro", "Login or create a new account."),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.newBtn", { href: "#!/login" }, "Login"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.newBtn", { href: "#!/newuser" }, "Create account"),
        ];
    }

};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (account);


/***/ }),

/***/ "./www/js/views/archiveview.js":
/*!*************************************!*\
  !*** ./www/js/views/archiveview.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_savemodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/savemodel */ "./www/js/models/savemodel.js");





// let imgurClient = "41dec9efbbede41";
// let imgurClientSecret = "f89953e5c719d0bea4ce88c21ab96f34285a856e";
// let albumDelete = "m9kKnmYAEY7mgxX";
// let albumID = "Gp3i1ef";
    let minImg = 0;
    let maxImg = 2;


let archiveview = {
    archiveReady: false,
    imageArray: {},

    oninit: function() {
        archiveview.archiveReady = false;
        archiveview.imageArray = _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.getArchive();

        // console.log(archiveview.imageArray);
    },
    view: function() {
        if (archiveview.archiveReady) {
            let currentPage = archiveview.imageArray.slice(minImg, maxImg);

            return [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "WIVI ARCHIVE"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.intro", `Here are past WIVIs stored to provide inspiration 
                for future viewers.`),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.archiveContainer", [
                    currentPage.map(function (data) {
                        return mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.archiveObject", [
                            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.archiveTitle", data.title),
                            mithril__WEBPACK_IMPORTED_MODULE_0___default()("img.archiveImg", { src: data.link })
                        ]);
                    })
                ]),
                (maxImg != archiveview.imageArray.length + 1) ? mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.finishedBtn", {
                    onclick: function() {
                        minImg += 2;
                        maxImg += 2;
                        currentPage = archiveview.imageArray.slice(minImg, maxImg);
                    }
                }, "NEXT PAGE"): null,
                (minImg != 0) ? mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.finishedBtn", {
                    onclick: function() {
                        minImg -= 2;
                        maxImg -= 2;
                        currentPage = archiveview.imageArray.slice(minImg, maxImg);
                    }
                }, "PREVIOUS PAGE"): null
            ];
        }
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "WIVI ARCHIVE"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.intro", "Loading archive..."),
        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (archiveview);


/***/ }),

/***/ "./www/js/views/artview.js":
/*!*********************************!*\
  !*** ./www/js/views/artview.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_artmodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/artmodel */ "./www/js/models/artmodel.js");
/* harmony import */ var _models_savemodel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../models/savemodel */ "./www/js/models/savemodel.js");
/* harmony import */ var _src_obst__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../src/obst */ "./www/src/obst.js");







let searchWords;
var metUrl;
var smithUrl;

var metAuthor;
var metYear;
var metTitle;
var smithAuthor;
var smithYear;
var smithTitle;

let renderArt = function (Snumber) {
    var smithImg = new Image;
    var metImg = new Image;

    smithImg.src = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].objects[Snumber].images[0].b.url;
    metImg.src = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].primaryImageSmall;

    smithUrl = smithImg.src;
    metUrl = metImg.src;
    console.log(Snumber);

    try {
        smithAuthor = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].objects[Snumber].participants[0].person_name;
    } catch (TypeError) {
        smithAuthor = "Unknown";
    }
    smithYear = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].objects[Snumber].date;     //get smith data
    smithTitle = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].objects[Snumber].title;

    metAuthor = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].artistDisplayName;
    metYear = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].objectDate;          //get met data
    metTitle = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].title;


    return [
        mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.artcontainer", [     //not very elegant fade-in-onload code
            mithril__WEBPACK_IMPORTED_MODULE_0___default()('img.artObj', {
                src: smithImg.src,

                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                onload(e) {
                    e.target.style.cssText += `
                        opacity: 1;
                    `;
                    e.redraw = false;
                },

                // ontransitionend(e) {
                //     e.target.style.height = 'auto'
                // },
            }),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()('img.artObj', {
                src: metImg.src,

                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                onload(e) {
                    e.target.style.cssText += `
                        opacity: 1;
                    `;
                    e.redraw = false;
                },

                // ontransitionend(e) {
                //     e.target.style.height = 'auto'
                // },
            })
        ])
    ];
};

let renderRandomSmith = function () {
    let smithImg = new Image;
    let metImg = new Image;

    smithImg.src = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].data.patterns.pattern[0].imageUrl[0];
    metImg.src = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].primaryImageSmall;

    smithUrl = smithImg.src;
    metUrl = metImg.src;

    smithAuthor = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].data.patterns.pattern[0].userName[0];
    smithYear = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].data.patterns.pattern[0].dateCreated[0];     //get random
    smithTitle = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].data.patterns.pattern[0].title[0];

    metAuthor = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].artistDisplayName;
    metYear = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].objectDate;      //get met data
    metTitle = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].title;

    return [
        mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.artcontainer", [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()('img.artObj', {
                src: smithImg.src,

                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                onload(e) {
                    e.target.style.cssText += `
                        opacity: 1;
                    `;
                    e.redraw = false;
                },

            }),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()('img.artObj', {
                src: metImg.src,

                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                onload(e) {
                    e.target.style.cssText += `
                        opacity: 1;
                    `;
                    e.redraw = false;
                },

            })
        ])
    ];
};

let renderRandomMet = function (Snumber) {
    let smithImg = new Image;
    let metImg = new Image;

    smithImg.src = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].objects[Snumber].images[0].b.url;
    metImg.src = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].data.patterns.pattern[0].imageUrl[0];

    smithUrl = smithImg.src;
    metUrl = metImg.src;

    try {
        smithAuthor = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].objects[Snumber].participants[0].person_name;
    } catch (TypeError) {
        smithAuthor = "Unknown";
    }
    smithYear = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].objects[Snumber].date;     //get smith data
    smithTitle = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].objects[Snumber].title;

    metAuthor = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].data.patterns.pattern[0].userName[0];
    metYear = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].data.patterns.pattern[0].dateCreated[0];     //get random data
    metTitle = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].data.patterns.pattern[0].title[0];

    return [
        mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.artcontainer", [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()('img.artObj', {
                src: smithImg.src,

                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                onload(e) {
                    e.target.style.cssText += `
                        opacity: 1;
                    `;
                    e.redraw = false;
                },

            }),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()('img.artObj', {
                src: metImg.src,

                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                onload(e) {
                    e.target.style.cssText += `
                        opacity: 1;
                    `;
                    e.redraw = false;
                },

            })
        ])
    ];
};

let renderRandomBoth = function () {
    let smithImg = new Image;
    let metImg = new Image;

    smithImg.src = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].data.patterns.pattern[0].imageUrl[0];
    metImg.src = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].data.patterns.pattern[0].imageUrl[0];

    smithUrl = smithImg.src;
    metUrl = metImg.src;

    metAuthor = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].data.patterns.pattern[0].userName[0];
    metYear = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].data.patterns.pattern[0].dateCreated[0];     //get random
    metTitle = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0].data.patterns.pattern[0].title[0];

    smithAuthor = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].data.patterns.pattern[0].userName[0];
    smithYear = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].data.patterns.pattern[0].dateCreated[0];     //get random
    smithTitle = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].data.patterns.pattern[0].title[0];

    return [
        mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.artcontainer", [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()('img.artObj', {
                src: smithImg.src,

                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                onload(e) {
                    e.target.style.cssText += `
                        opacity: 1;
                    `;
                    e.redraw = false;
                },

            }),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()('img.artObj', {
                src: metImg.src,

                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                onload(e) {
                    e.target.style.cssText += `
                        opacity: 1;
                    `;
                    e.redraw = false;
                },

            })
        ])
    ];
};

let artview = {
    oninit: function (vnode) {
        searchWords = _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.getArt(vnode.attrs.book);
        _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.getObstrat();
    },
    view: function () {
        let art;

        // console.log(artmodel.smithArray[0]);
        // console.log(artmodel.metArray[0]);
        if (_models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0] != undefined && _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.metArray[0] != undefined) {
            let searchWordDisp = `${searchWords[1]} ${searchWords[0]}`.toUpperCase();

            if (_models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.randSmith == true && _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.randMet == false) {
                art = renderRandomSmith();
            } else if (_models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.randMet == true && _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.randSmith == false) {
                let Snumber = Math.floor(Math.random() * _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].objects.length);

                art = renderRandomMet(Snumber);
            } else if (_models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.randSmith == true && _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.randSmith == true) {
                art = renderRandomBoth();
            } else {
                let Snumber = Math.floor(Math.random() * _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.smithArray[0].objects.length);

                art = renderArt(Snumber);
            }

            if (_models_savemodel__WEBPACK_IMPORTED_MODULE_2__.default.token) {
                let number = Math.floor(Math.random() * _src_obst__WEBPACK_IMPORTED_MODULE_3__.default.prompts.length);

                return mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.artcontainer",
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.prompt", _src_obst__WEBPACK_IMPORTED_MODULE_3__.default.prompts[number]),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.linebreak"),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", searchWordDisp),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.linebreak"),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.obst", [
                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.strategy", "STRATEGY"),

                    ], _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.obstrat),
                    art,
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.finishedBtn", {
                        onclick: function(e) {
                            e.redraw = false;
                            let saveData = [searchWordDisp, smithUrl, metUrl, _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.obstrat,
                                smithAuthor, smithYear, smithTitle, metAuthor, metYear, metTitle];

                            _models_savemodel__WEBPACK_IMPORTED_MODULE_2__.default.saveData = saveData;
                            // console.log(savemodel.saveData);
                            mithril__WEBPACK_IMPORTED_MODULE_0___default().route.set("/saveview");
                        }
                    }, "DONE CREATING?"),
                );
            } else {    //no favorite-icon, not logged in
                let number = Math.floor(Math.random() * _src_obst__WEBPACK_IMPORTED_MODULE_3__.default.prompts.length);

                return mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.artcontainer",
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.prompt", _src_obst__WEBPACK_IMPORTED_MODULE_3__.default.prompts[number]),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.linebreak"),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", searchWordDisp),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.linebreak"),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.obst", [
                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.strategy", "STRATEGY"),
                    ], _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.obstrat),
                    art,
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.finishedBtn", {
                        onclick: function (e) {
                            e.redraw = false;
                            let saveData = [searchWordDisp, smithUrl, metUrl, _models_artmodel__WEBPACK_IMPORTED_MODULE_1__.default.obstrat,
                                smithAuthor, smithYear, smithTitle, metAuthor, metYear, metTitle];

                            _models_savemodel__WEBPACK_IMPORTED_MODULE_2__.default.saveData = saveData;
                            // console.log(savemodel.saveData);
                            mithril__WEBPACK_IMPORTED_MODULE_0___default().route.set("/saveview");
                        }
                    }, "DONE CREATING?"),
                );
            }
        }
        return mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.message", "Loading images...");
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (artview);


/***/ }),

/***/ "./www/js/views/bookview.js":
/*!**********************************!*\
  !*** ./www/js/views/bookview.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_bookmodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/bookmodel */ "./www/js/models/bookmodel.js");



let wordsWithLinks = [];
let randomWord;

function titleToLinks(title) {
    let words = title.split(" ");
    let wordsWithLinks = [];

    words.map(function (word) {
        wordsWithLinks.push(mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.wordBtn", { href: "#!/artview" + word + "-"
        + randomWord }, word));
    });
    return wordsWithLinks;
}

let bookview = {
    oninit: function(vnode) {
        // console.log(vnode);
        randomWord = vnode.attrs.word;
        _models_bookmodel__WEBPACK_IMPORTED_MODULE_1__.default.getBookshelf(vnode.attrs.word);
    },
    view: function () {
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.prompt", `You chose the word ${randomWord.toUpperCase()}. I used that word to find book titles. 
            pick one more word here!`),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "One more word"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.wordcontainer", [
                _models_bookmodel__WEBPACK_IMPORTED_MODULE_1__.default.currentBookList.map(function (book) {
                    wordsWithLinks = titleToLinks(book);
                    return [
                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.titlecontainer", wordsWithLinks),
                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.linebreak")
                    ];
                })
            ])
        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (bookview);


/***/ }),

/***/ "./www/js/views/cameraview.js":
/*!************************************!*\
  !*** ./www/js/views/cameraview.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_savemodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/savemodel */ "./www/js/models/savemodel.js");





// let trueAlbumID = "Mac86rR";
let trueAlbumDelete = "65BRe5wJjq0cruu";    //also in savemodel-getarchive

let imgurClient = "41dec9efbbede41";
// let imgurClientSecret = "f89953e5c719d0bea4ce88c21ab96f34285a856e";
// let albumDelete = "DUTJT8M2WGmOHQ2";
// let albumID = "9lzstbO"

function addToAlbum(hash) {
    let body = new FormData();

    body.append("deletehashes[]", hash);

    mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
        method: "POST",
        url: `https://api.imgur.com/3/album/${trueAlbumDelete}/add`,
        body: body,
        headers: {
            "Authorization": "Client-ID " + imgurClient,
        }
    })
        .then(function (result) {
            console.log(result);
        });
}

function upload(e) {
    var file = e.target.files[0];
    let body = new FormData();

    body.append("image", file);
    body.append("title", _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[0]);
    body.append("description", _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[3]);

    mithril__WEBPACK_IMPORTED_MODULE_0___default().request({
        method: "POST",
        url: "https://api.imgur.com/3/image",
        body: body,
        headers: {
            "Authorization": "Client-ID " + imgurClient,
        }
    })
        .then(function (result) {
            // console.log(result);
            addToAlbum(result.data.deletehash);
            if (_models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.token) {
                if (_models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.favorited == false) {
                    _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.addToFav(_models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData, result.data.link);
                } else {
                    _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.addImgToFav(result.data.link, _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData); //add imgur link to fav
                }
            }
            mithril__WEBPACK_IMPORTED_MODULE_0___default().redraw();
            mithril__WEBPACK_IMPORTED_MODULE_0___default().route.set("/prearchiveview/:url", { url: result.data.link });
        })
        .catch(function (e) {
            console.log(e);
            mithril__WEBPACK_IMPORTED_MODULE_0___default().route.set("/uploaderror");
        });
}

let cameraview = {
    // oninit: function() {
    // },
    view: function() {
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "UPLOAD"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.intro", "Choose an image to be anonymously uploaded to the WIVI Archive."),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("input[type=file]", { onchange: upload })

        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (cameraview);


/***/ }),

/***/ "./www/js/views/favoriteview.js":
/*!**************************************!*\
  !*** ./www/js/views/favoriteview.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_savemodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/savemodel */ "./www/js/models/savemodel.js");




let wordview = {
    oninit: function() {
        _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.getFavs();
    },
    view: function () {
        if (_models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.allData) {
            let parsedData = [];

            for (let i = 0; i < _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.allData.data.length; i++) {
                parsedData.push(JSON.parse(_models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.allData.data[i].artefact));
            }

            return [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "Favorites"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.favchoice", [
                    parsedData.map(function (data, index) {
                        return mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.favBtn", {
                            onclick: function() {
                                _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.currentSaveID = _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.allData.data[index].id
                                _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData = Object.values(data);
                                _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.favorited = true;
                                // console.log(savemodel.favorited);
                                mithril__WEBPACK_IMPORTED_MODULE_0___default().route.set("/saveview");
                            }
                        }, data.searchWordDisp);
                    })
                ])
            ];
        }
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (wordview);


/***/ }),

/***/ "./www/js/views/frontpage.js":
/*!***********************************!*\
  !*** ./www/js/views/frontpage.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);



let frontpage = {
    view: function() {
        return [
            // m("div.title", "WIVI"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.frontBtnContainer", [
                
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.btnContainer", [
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.roundBtn"),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.textBG"),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.roundText", { href: "#!/wordview" }, "START"),
                ]),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.btnContainer", [
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.roundBtn"),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.textBG"),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.roundText", { href: "#!/archiveview" }, "ARCHIVE"),
                ]),
            ]),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.intro", {
                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                oncreate(e) {
                    setTimeout(() => {
                        e.dom.style.opacity = 1;
                    }, 500);
                }
            }, `WIVI will help you
            kick-start your brainstorming session. Grab your art supplies and let's go!`),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("h1", {
                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                oncreate(e) {
                    setTimeout(() => {
                        e.dom.style.opacity = 1;
                    }, 2000);
                }
            }, "How does it work?"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.introstep", {
                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                oncreate(e) {
                    setTimeout(() => {
                        e.dom.style.opacity = 1;
                    }, 3000);
                }
            }, [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.stepTitle fas fa-random"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.stepDesc", "Pick a random word.")
            ]),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.introstep", {
                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                oncreate(e) {
                    setTimeout(() => {
                        e.dom.style.opacity = 1;
                    }, 4000);
                }
            }, [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.stepTitle fas fa-book"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.stepDesc", `Choose a second word from the 
                book titles.`)
            ]),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.introstep", {
                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                oncreate(e) {
                    setTimeout(() => {
                        e.dom.style.opacity = 1;
                    }, 5000);
                }
            }, [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.stepTitle fas fa-palette"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.stepDesc", `You will be presented with 2 images and 
                a 'Strategy'. Interpret your title, images, Strategy - and create!`)
            ]),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.introstep", {
                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                oncreate(e) {
                    setTimeout(() => {
                        e.dom.style.opacity = 1;
                    }, 6000);
                }
            }, [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.stepTitle fas fa-rocket"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.stepDesc", "If you want, share your work to the Archive.")
            ]),

        ];
    }

};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (frontpage);


/***/ }),

/***/ "./www/js/views/layout.js":
/*!********************************!*\
  !*** ./www/js/views/layout.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);




let layout = {
    view: function (vnode) {
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("nav.top-nav", [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.nav-home fas fa-house-user", { href: "#!/" }),
            ]),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.topbar"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.logo", { href: "#!/" }),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("main.container", vnode.children)
        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (layout);


/***/ }),

/***/ "./www/js/views/layoutfavorite.js":
/*!****************************************!*\
  !*** ./www/js/views/layoutfavorite.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);




let layoutFavorite = {
    view: function (vnode) {
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("nav.top-nav", [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.nav-home fas fa-house-user", { href: "#!/" }),
            ]),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.topbar"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.logo", { href: "#!/" }),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("main.container", vnode.children)
        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (layoutFavorite);


/***/ }),

/***/ "./www/js/views/layoutfront.js":
/*!*************************************!*\
  !*** ./www/js/views/layoutfront.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_savemodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/savemodel */ "./www/js/models/savemodel.js");





let layoutFront = {
    view: function (vnode) {
        if (_models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.token) {
            return [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("nav.top-nav", [
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.nav-home fas fa-user-circle", { href: "#!/favoriteview" }),
                ]),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.topbar"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()('a.logo', { href: "#!/" }),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("main.container", vnode.children)
            ];
        }

        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("nav.top-nav", [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.nav-home fas fa-user-circle", { href: "#!/account" }),
            ]),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.topbar"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()('a.logo', { href: "#!/" }),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("main.container", vnode.children)
        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (layoutFront);


/***/ }),

/***/ "./www/js/views/login.js":
/*!*******************************!*\
  !*** ./www/js/views/login.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_savemodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/savemodel */ "./www/js/models/savemodel.js");





let login = {
    view: function () {
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "Login"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("form.form.new", {
                onsubmit: function (event) {
                    event.preventDefault();
                    _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.loginUser();
                }
            }, [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("label.input-label", "Email"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("input[type=email].input", {
                    oninput: function (event) {
                        _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.email = event.target.value;
                    },
                    value: _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.email
                }),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("label.input-label", "Password"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("input[type=password].input", {
                    oninput: function (event) {
                        _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.password = event.target.value;
                    },
                    value: _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.password
                }),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("input[type=submit][value=Login].button", "Login")
            ])
        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (login);


/***/ }),

/***/ "./www/js/views/newuser.js":
/*!*********************************!*\
  !*** ./www/js/views/newuser.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_savemodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/savemodel */ "./www/js/models/savemodel.js");





let newuser = {
    view: function () {
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "New user"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("form.form.new", {
                onsubmit: function (event) {
                    event.preventDefault();
                    _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.registerUser();
                }
            }, [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("label.input-label", "Email"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("input[type=email].input", {
                    oninput: function (event) {
                        _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.email = event.target.value;
                    },
                    value: _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.email
                }),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("label.input-label", "Password"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("input[type=password].input", {
                    oninput: function (event) {
                        _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.password = event.target.value;
                    },
                    value: _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.password
                }),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("input[type=submit][value=Create].button", "Create")
            ])
        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (newuser);


/***/ }),

/***/ "./www/js/views/prearchiveview.js":
/*!****************************************!*\
  !*** ./www/js/views/prearchiveview.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);




var newImgurUrl;

let prearchiveview = {
    oninit: function(vnode) {
        // console.log(vnode);
        newImgurUrl = vnode.attrs.url;
    },
    view: function() {
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "PUBLISHED"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.intro", "Thank you! This image is now saved to the WIVI Archive."),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()('img.artObj', {
                src: newImgurUrl,

                style: `
                    opacity: 0;
                    transition: 1s ease-in-out;
                `,

                onload(e) {
                    e.target.style.cssText += `
                        opacity: 1;
                    `;
                    e.redraw = false;
                },

                // ontransitionend(e) {
                //     e.target.style.height = 'auto'
                // },
            }),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.nextBtn", { href: "#!/archiveview" }, "VIEW ARCHIVE")

        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (prearchiveview);


/***/ }),

/***/ "./www/js/views/saveview.js":
/*!**********************************!*\
  !*** ./www/js/views/saveview.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_savemodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/savemodel */ "./www/js/models/savemodel.js");





let saveview = {
    view: function() {
        let showFav = _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.token && !_models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.favorited;
        console.log(_models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData.length);
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.artcontainer", [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[0]),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.linebreak"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.obst", [
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.strategy", "STRATEGY"),
                ], _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[3]), //ObStrat
                showFav ? mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.favcontainer", [
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.starIcon", {
                        onclick: function (e) {  //Click favorite!
                            console.log(e);
                            // e.redraw = false;
                            _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.favorited = true;
                            _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.addToFav(_models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData);
                        }
                    }, _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.favorited ? "REMOVE" : "ADD TO FAV"),
                ]): null,
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.cameraBtn", { href: "#!/cameraview" }, "UPLOAD YOUR WIVI"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.tablecontainer", [
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("img.imgThumb", { src: _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[1] } ), //smithURL
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("table",
                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("tbody",
                            [
                                mithril__WEBPACK_IMPORTED_MODULE_0___default()("tr",
                                    [
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            "Title:",
                                        ),
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[6], //smithTitle
                                        )
                                    ]
                                ),
                                mithril__WEBPACK_IMPORTED_MODULE_0___default()("tr",
                                    [
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            "Author: ",
                                        ),
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[4], //smithAuthor
                                        )
                                    ]
                                ),
                                mithril__WEBPACK_IMPORTED_MODULE_0___default()("tr",
                                    [
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            "Date: ",
                                        ),
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[5], //smithYear
                                        )
                                    ]
                                )
                            ]
                        )
                    )
                ]),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.tablecontainer", [
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("img.imgThumb", { src: _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[2] } ), //metURL
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("table",
                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("tbody",
                            [
                                mithril__WEBPACK_IMPORTED_MODULE_0___default()("tr",
                                    [
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            "Title:",
                                        ),
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[9], //metTitle
                                        )
                                    ]
                                ),
                                mithril__WEBPACK_IMPORTED_MODULE_0___default()("tr",
                                    [
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            "Author: ",
                                        ),
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[7], //metAuth
                                        )
                                    ]
                                ),
                                mithril__WEBPACK_IMPORTED_MODULE_0___default()("tr",
                                    [
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            "Date: ",
                                        ),
                                        mithril__WEBPACK_IMPORTED_MODULE_0___default()("td",
                                            _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[8], //metYear
                                        )
                                    ]
                                )
                            ]
                        )
                    )
                ]),
                (_models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData.length == 11) ? mithril__WEBPACK_IMPORTED_MODULE_0___default()("artcontainer", [
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "Your WIVI"),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("img.imgThumb", { src: _models_savemodel__WEBPACK_IMPORTED_MODULE_1__.default.saveData[10] })
                ]): null
            ])
        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (saveview);


/***/ }),

/***/ "./www/js/views/splash.js":
/*!********************************!*\
  !*** ./www/js/views/splash.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);



let splash = {
    view: function() {
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.content", [
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.splashlogo"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.splashtitle", "Need inspiration?"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.bgtext", `WIVI helps you break creative block
                            by using randomized, creative prompts.`),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.bgtext", `No endless feed scrolling. You will get: `),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("ul.list", [
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("li.entry", "A title"),
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("li.entry", "Two images"), 
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("li.entry", "A 'Strategy'"), 
                ]),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.bgtext", `Use this to make a quick sketch, take a photo, write a poem or
                                maybe build a LEGO sculpture. Hopefully it will get you ready to brainstorm!`),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.diagBtn", { href: "#!/frontpage" }, "START WIVI"),
                mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.diagBG", [
    
                    mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.diagonal", [
    
                    ])
                ]),
            ])


        ];
    }

};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (splash);


/***/ }),

/***/ "./www/js/views/uploaderror.js":
/*!*************************************!*\
  !*** ./www/js/views/uploaderror.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);




let uploaderror = {

    view: function() {
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "ERROR"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.intro", "Something went wrong in the upload. Sorry about that. Try again?"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.nextBtn", { href: "#!/saveview" }, "BACK")

        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (uploaderror);


/***/ }),

/***/ "./www/js/views/wordview.js":
/*!**********************************!*\
  !*** ./www/js/views/wordview.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _models_bookmodel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/bookmodel */ "./www/js/models/bookmodel.js");



let wordview = {
    oninit: function() {
        _models_bookmodel__WEBPACK_IMPORTED_MODULE_1__.default.getRandomWord();
    },
    view: function () {
        return [
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.prompt", "Here are some random words. Choose one that seems interesting."),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.title", "Pick one"),
            mithril__WEBPACK_IMPORTED_MODULE_0___default()("div.wordcontainer", [
                _models_bookmodel__WEBPACK_IMPORTED_MODULE_1__.default.currentWords.map(function (word) {
                    return mithril__WEBPACK_IMPORTED_MODULE_0___default()("a.wordBtn", { href: "#!/bookview" + word }, word);
                })
            ])
        ];
    }
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (wordview);


/***/ }),

/***/ "./www/src/obst.js":
/*!*************************!*\
  !*** ./www/src/obst.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


let oblique = {
    prompts: [
        "You have a title, a strategy and two images. Make something!",
        "Use what you see on this page to create something new.",
        "Here is the moodboard for your next thing. Now make it!",
        "Does the title inspire you more than the images do? Go with that then!",
        "That second image is pretty cool. I bet you could make it cooler though.",
        "Good ideas need hard work to be found. Now make something out of what you see here.",
    ],
    strategies: [
        'Abandon favorite tools',
        'Be dirty',
        'Breathe more deeply',
        'Decorate, decorate',
        'Define an area as "safe" and use it as an anchor',
        'Destroy the most important thing',
        'Only straight lines',
        'Emphasize differences',
        'Emphasize repetitions',
        'Emphasize the shadows',
        'Look at a very small object, look at its centre',
        'Look at the order in which you do things',
        'Look closely at the smallest details and amplify them',
        'Make it valuable by putting it in an exquisite frame',
        'Make a sudden, unpredictable shape',
        'Only one element of each kind',
        'Reverse',
        'Tidy up',
        'Turn it upside down',
        'Use an unacceptable color',
        'What would your closest friend do?',
        'Work at a different speed',
        "Add black",
        "The right thing at the wrong place",
        "The wrong thing at the right place",
        "Use your non-dominant hand",
        "Stretch it out",
        "Make it huge",
        "Make it tiny",
        "Only shades of grey",
        "Make a collage",
        "No straight lines",
        "Only one single line",
        "Make it heavy",
        "Go outside",
        "Color outside the lines",
        "Create using nothing but letters",
        "Create, then destroy, then repair",
    ]
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (oblique);


/***/ }),

/***/ "./www/src/top1k.js":
/*!**************************!*\
  !*** ./www/src/top1k.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


let top1k = {
    topwords: ['a',
        'ability',
        'able',
        'about',
        'above',
        'accept',
        'according',
        'account',
        'across',
        'act',
        'action',
        'activity',
        'actually',
        'add',
        'address',
        'administration',
        'admit',
        'adult',
        'affect',
        'after',
        'again',
        'against',
        'age',
        'agency',
        'agent',
        'ago',
        'agree',
        'agreement',
        'ahead',
        'air',
        'all',
        'allow',
        'almost',
        'alone',
        'along',
        'already',
        'also',
        'although',
        'always',
        'American',
        'among',
        'amount',
        'analysis',
        'and',
        'animal',
        'another',
        'answer',
        'any',
        'anyone',
        'anything',
        'appear',
        'apply',
        'approach',
        'area',
        'argue',
        'arm',
        'around',
        'arrive',
        'art',
        'article',
        'artist',
        'as',
        'ask',
        'assume',
        'at',
        'attack',
        'attention',
        'attorney',
        'audience',
        'author',
        'authority',
        'available',
        'avoid',
        'away',
        'baby',
        'back',
        'bad',
        'bag',
        'ball',
        'bank',
        'bar',
        'base',
        'be',
        'beat',
        'beautiful',
        'because',
        'become',
        'bed',
        'before',
        'begin',
        'behavior',
        'behind',
        'believe',
        'benefit',
        'best',
        'better',
        'between',
        'beyond',
        'big',
        'bill',
        'billion',
        'bit',
        'black',
        'blood',
        'blue',
        'board',
        'body',
        'book',
        'born',
        'both',
        'box',
        'boy',
        'break',
        'bring',
        'brother',
        'budget',
        'build',
        'building',
        'business',
        'but',
        'buy',
        'by',
        'call',
        'camera',
        'campaign',
        'can',
        'cancer',
        'candidate',
        'capital',
        'car',
        'card',
        'care',
        'career',
        'carry',
        'case',
        'catch',
        'cause',
        'cell',
        'center',
        'central',
        'century',
        'certain',
        'certainly',
        'chair',
        'challenge',
        'chance',
        'change',
        'character',
        'charge',
        'check',
        'child',
        'choice',
        'choose',
        'church',
        'citizen',
        'city',
        'civil',
        'claim',
        'class',
        'clear',
        'clearly',
        'close',
        'coach',
        'cold',
        'collection',
        'college',
        'color',
        'come',
        'commercial',
        'common',
        'community',
        'company',
        'compare',
        'computer',
        'concern',
        'condition',
        'conference',
        'Congress',
        'consider',
        'consumer',
        'contain',
        'continue',
        'control',
        'cost',
        'could',
        'country',
        'couple',
        'course',
        'court',
        'cover',
        'create',
        'crime',
        'cultural',
        'culture',
        'cup',
        'current',
        'customer',
        'cut',
        'dark',
        'data',
        'daughter',
        'day',
        'dead',
        'deal',
        'death',
        'debate',
        'decade',
        'decide',
        'decision',
        'deep',
        'defense',
        'degree',
        'Democrat',
        'democratic',
        'describe',
        'design',
        'despite',
        'detail',
        'determine',
        'develop',
        'development',
        'die',
        'difference',
        'different',
        'difficult',
        'dinner',
        'direction',
        'director',
        'discover',
        'discuss',
        'discussion',
        'disease',
        'do',
        'doctor',
        'dog',
        'door',
        'down',
        'draw',
        'dream',
        'drive',
        'drop',
        'drug',
        'during',
        'each',
        'early',
        'east',
        'easy',
        'eat',
        'economic',
        'economy',
        'edge',
        'education',
        'effect',
        'effort',
        'eight',
        'either',
        'election',
        'else',
        'employee',
        'end',
        'energy',
        'enjoy',
        'enough',
        'enter',
        'entire',
        'environment',
        'environmental',
        'especially',
        'establish',
        'even',
        'evening',
        'event',
        'ever',
        'every',
        'everybody',
        'everyone',
        'everything',
        'evidence',
        'exactly',
        'example',
        'executive',
        'exist',
        'expect',
        'experience',
        'expert',
        'explain',
        'eye',
        'face',
        'fact',
        'factor',
        'fail',
        'fall',
        'family',
        'far',
        'fast',
        'father',
        'fear',
        'federal',
        'feel',
        'feeling',
        'few',
        'field',
        'fight',
        'figure',
        'fill',
        'film',
        'final',
        'finally',
        'financial',
        'find',
        'fine',
        'finger',
        'finish',
        'fire',
        'firm',
        'first',
        'fish',
        'five',
        'floor',
        'fly',
        'focus',
        'follow',
        'food',
        'foot',
        'for',
        'force',
        'foreign',
        'forget',
        'form',
        'former',
        'forward',
        'four',
        'free',
        'friend',
        'from',
        'front',
        'full',
        'fund',
        'future',
        'game',
        'garden',
        'gas',
        'general',
        'generation',
        'get',
        'girl',
        'give',
        'glass',
        'go',
        'goal',
        'good',
        'government',
        'great',
        'green',
        'ground',
        'group',
        'grow',
        'growth',
        'guess',
        'gun',
        'guy',
        'hair',
        'half',
        'hand',
        'hang',
        'happen',
        'happy',
        'hard',
        'have',
        'he',
        'head',
        'health',
        'hear',
        'heart',
        'heat',
        'heavy',
        'help',
        'her',
        'here',
        'herself',
        'high',
        'him',
        'himself',
        'his',
        'history',
        'hit',
        'hold',
        'home',
        'hope',
        'hospital',
        'hot',
        'hotel',
        'hour',
        'house',
        'how',
        'however',
        'huge',
        'human',
        'hundred',
        'husband',
        'I',
        'idea',
        'identify',
        'if',
        'image',
        'imagine',
        'impact',
        'important',
        'improve',
        'in',
        'include',
        'including',
        'increase',
        'indeed',
        'indicate',
        'individual',
        'industry',
        'information',
        'inside',
        'instead',
        'institution',
        'interest',
        'interesting',
        'international',
        'interview',
        'into',
        'investment',
        'involve',
        'issue',
        'it',
        'item',
        'its',
        'itself',
        'job',
        'join',
        'just',
        'keep',
        'key',
        'kid',
        'kill',
        'kind',
        'kitchen',
        'know',
        'knowledge',
        'land',
        'language',
        'large',
        'last',
        'late',
        'later',
        'laugh',
        'law',
        'lawyer',
        'lay',
        'lead',
        'leader',
        'learn',
        'least',
        'leave',
        'left',
        'leg',
        'legal',
        'less',
        'let',
        'letter',
        'level',
        'lie',
        'life',
        'light',
        'like',
        'likely',
        'line',
        'list',
        'listen',
        'little',
        'live',
        'local',
        'long',
        'look',
        'lose',
        'loss',
        'lot',
        'love',
        'low',
        'machine',
        'magazine',
        'main',
        'maintain',
        'major',
        'majority',
        'make',
        'man',
        'manage',
        'management',
        'manager',
        'many',
        'market',
        'marriage',
        'material',
        'matter',
        'may',
        'maybe',
        'me',
        'mean',
        'measure',
        'media',
        'medical',
        'meet',
        'meeting',
        'member',
        'memory',
        'mention',
        'message',
        'method',
        'middle',
        'might',
        'military',
        'million',
        'mind',
        'minute',
        'miss',
        'mission',
        'model',
        'modern',
        'moment',
        'money',
        'month',
        'more',
        'morning',
        'most',
        'mother',
        'mouth',
        'move',
        'movement',
        'movie',
        'Mr',
        'Mrs',
        'much',
        'music',
        'must',
        'my',
        'myself',
        'name',
        'nation',
        'national',
        'natural',
        'nature',
        'near',
        'nearly',
        'necessary',
        'need',
        'network',
        'never',
        'new',
        'news',
        'newspaper',
        'next',
        'nice',
        'night',
        'no',
        'none',
        'nor',
        'north',
        'not',
        'note',
        'nothing',
        'notice',
        'now',
        'n',
        'number',
        'occur',
        'of',
        'off',
        'offer',
        'office',
        'officer',
        'official',
        'often',
        'oh',
        'oil',
        'ok',
        'old',
        'on',
        'once',
        'one',
        'only',
        'onto',
        'open',
        'operation',
        'opportunity',
        'option',
        'or',
        'order',
        'organization',
        'other',
        'others',
        'our',
        'out',
        'outside',
        'over',
        'own',
        'owner',
        'page',
        'pain',
        'painting',
        'paper',
        'parent',
        'part',
        'participant',
        'particular',
        'particularly',
        'partner',
        'party',
        'pass',
        'past',
        'patient',
        'pattern',
        'pay',
        'peace',
        'people',
        'per',
        'perform',
        'performance',
        'perhaps',
        'period',
        'person',
        'personal',
        'phone',
        'physical',
        'pick',
        'picture',
        'piece',
        'place',
        'plan',
        'plant',
        'play',
        'player',
        'PM',
        'point',
        'police',
        'policy',
        'political',
        'politics',
        'poor',
        'popular',
        'population',
        'position',
        'positive',
        'possible',
        'power',
        'practice',
        'prepare',
        'present',
        'president',
        'pressure',
        'pretty',
        'prevent',
        'price',
        'private',
        'probably',
        'problem',
        'process',
        'produce',
        'product',
        'production',
        'professional',
        'professor',
        'program',
        'project',
        'property',
        'protect',
        'prove',
        'provide',
        'public',
        'pull',
        'purpose',
        'push',
        'put',
        'quality',
        'question',
        'quickly',
        'quite',
        'race',
        'radio',
        'raise',
        'range',
        'rate',
        'rather',
        'reach',
        'read',
        'ready',
        'real',
        'reality',
        'realize',
        'really',
        'reason',
        'receive',
        'recent',
        'recently',
        'recognize',
        'record',
        'red',
        'reduce',
        'reflect',
        'region',
        'relate',
        'relationship',
        'religious',
        'remain',
        'remember',
        'remove',
        'report',
        'represent',
        'Republican',
        'require',
        'research',
        'resource',
        'respond',
        'response',
        'responsibility',
        'rest',
        'result',
        'return',
        'reveal',
        'rich',
        'right',
        'rise',
        'risk',
        'road',
        'rock',
        'role',
        'room',
        'rule',
        'run',
        'safe',
        'same',
        'save',
        'say',
        'scene',
        'school',
        'science',
        'scientist',
        'score',
        'sea',
        'season',
        'seat',
        'second',
        'section',
        'security',
        'see',
        'seek',
        'seem',
        'sell',
        'send',
        'senior',
        'sense',
        'series',
        'serious',
        'serve',
        'service',
        'set',
        'seven',
        'several',
        'sex',
        'sexual',
        'shake',
        'share',
        'she',
        'shoot',
        'short',
        'shot',
        'should',
        'shoulder',
        'show',
        'side',
        'sign',
        'significant',
        'similar',
        'simple',
        'simply',
        'since',
        'sing',
        'single',
        'sister',
        'sit',
        'site',
        'situation',
        'six',
        'size',
        'skill',
        'skin',
        'small',
        'smile',
        'so',
        'social',
        'society',
        'soldier',
        'some',
        'somebody',
        'someone',
        'something',
        'sometimes',
        'son',
        'song',
        'soon',
        'sort',
        'sound',
        'source',
        'south',
        'southern',
        'space',
        'speak',
        'special',
        'specific',
        'speech',
        'spend',
        'sport',
        'spring',
        'staff',
        'stage',
        'stand',
        'standard',
        'star',
        'start',
        'state',
        'statement',
        'station',
        'stay',
        'step',
        'still',
        'stock',
        'stop',
        'store',
        'story',
        'strategy',
        'street',
        'strong',
        'structure',
        'student',
        'study',
        'stuff',
        'style',
        'subject',
        'success',
        'successful',
        'such',
        'suddenly',
        'suffer',
        'suggest',
        'summer',
        'support',
        'sure',
        'surface',
        'system',
        'table',
        'take',
        'talk',
        'task',
        'tax',
        'teach',
        'teacher',
        'team',
        'technology',
        'television',
        'tell',
        'ten',
        'tend',
        'term',
        'test',
        'than',
        'thank',
        'that',
        'the',
        'their',
        'them',
        'themselves',
        'then',
        'theory',
        'there',
        'these',
        'they',
        'thing',
        'think',
        'third',
        'this',
        'those',
        'though',
        'thought',
        'thousand',
        'threat',
        'three',
        'through',
        'throughout',
        'throw',
        'thus',
        'time',
        'to',
        'today',
        'together',
        'tonight',
        'too',
        'top',
        'total',
        'tough',
        'toward',
        'town',
        'trade',
        'traditional',
        'training',
        'travel',
        'treat',
        'treatment',
        'tree',
        'trial',
        'trip',
        'trouble',
        'true',
        'truth',
        'try',
        'turn',
        'TV',
        'two',
        'type',
        'under',
        'understand',
        'unit',
        'until',
        'up',
        'upon',
        'us',
        'use',
        'usually',
        'value',
        'various',
        'very',
        'victim',
        'view',
        'violence',
        'visit',
        'voice',
        'vote',
        'wait',
        'walk',
        'wall',
        'want',
        'war',
        'watch',
        'water',
        'way',
        'we',
        'weapon',
        'wear',
        'week',
        'weight',
        'well',
        'west',
        'western',
        'what',
        'whatever',
        'when',
        'where',
        'whether',
        'which',
        'while',
        'white',
        'who',
        'whole',
        'whom',
        'whose',
        'why',
        'wide',
        'wife',
        'will',
        'win',
        'wind',
        'window',
        'wish',
        'with',
        'within',
        'without',
        'woman',
        'wonder',
        'word',
        'work',
        'worker',
        'world',
        'worry',
        'would',
        'write',
        'writer',
        'wrong',
        'yard',
        'yeah',
        'year',
        'yes',
        'yet',
        'you',
        'young',
        'your',
        'yourself',
    ]
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (top1k);


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!*************************!*\
  !*** ./www/js/index.js ***!
  \*************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mithril */ "./node_modules/mithril/index.js");
/* harmony import */ var mithril__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(mithril__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _views_layout__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./views/layout */ "./www/js/views/layout.js");
/* harmony import */ var _views_frontpage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./views/frontpage */ "./www/js/views/frontpage.js");
/* harmony import */ var _views_bookview__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./views/bookview */ "./www/js/views/bookview.js");
/* harmony import */ var _views_wordview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./views/wordview */ "./www/js/views/wordview.js");
/* harmony import */ var _views_artview__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./views/artview */ "./www/js/views/artview.js");
/* harmony import */ var _views_layoutfront__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./views/layoutfront */ "./www/js/views/layoutfront.js");
/* harmony import */ var _views_accountview__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./views/accountview */ "./www/js/views/accountview.js");
/* harmony import */ var _views_newuser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./views/newuser */ "./www/js/views/newuser.js");
/* harmony import */ var _views_login__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./views/login */ "./www/js/views/login.js");
/* harmony import */ var _views_saveview__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./views/saveview */ "./www/js/views/saveview.js");
/* harmony import */ var _views_layoutfavorite__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./views/layoutfavorite */ "./www/js/views/layoutfavorite.js");
/* harmony import */ var _views_favoriteview__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./views/favoriteview */ "./www/js/views/favoriteview.js");
/* harmony import */ var _views_cameraview__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./views/cameraview */ "./www/js/views/cameraview.js");
/* harmony import */ var _views_archiveview__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./views/archiveview */ "./www/js/views/archiveview.js");
/* harmony import */ var _views_prearchiveview__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./views/prearchiveview */ "./www/js/views/prearchiveview.js");
/* harmony import */ var _views_uploaderror__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./views/uploaderror */ "./www/js/views/uploaderror.js");
/* harmony import */ var _models_savemodel__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./models/savemodel */ "./www/js/models/savemodel.js");
/* harmony import */ var _views_splash__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./views/splash */ "./www/js/views/splash.js");






















document.addEventListener('deviceready', onDeviceReady, false);

function onDeviceReady() {
    mithril__WEBPACK_IMPORTED_MODULE_0___default().route(document.body, "/", {
        "/": {
            render: function () {
                _models_savemodel__WEBPACK_IMPORTED_MODULE_17__.default.favorited = false;
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_splash__WEBPACK_IMPORTED_MODULE_18__.default);
            }
        },
        "/frontpage": {
            render: function () {
                _models_savemodel__WEBPACK_IMPORTED_MODULE_17__.default.favorited = false;
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layoutfront__WEBPACK_IMPORTED_MODULE_6__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_frontpage__WEBPACK_IMPORTED_MODULE_2__.default));
            }
        },
        "/bookview:word": {
            render: function (vnode) {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layout__WEBPACK_IMPORTED_MODULE_1__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_bookview__WEBPACK_IMPORTED_MODULE_3__.default, vnode.attrs));
            }
        },
        "/artview:book": {
            render: function (vnode) {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layout__WEBPACK_IMPORTED_MODULE_1__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_artview__WEBPACK_IMPORTED_MODULE_5__.default, vnode.attrs));
            }
        },
        "/wordview": {
            render: function () {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layout__WEBPACK_IMPORTED_MODULE_1__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_wordview__WEBPACK_IMPORTED_MODULE_4__.default));
            }
        },
        "/saveview": {
            render: function () {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layout__WEBPACK_IMPORTED_MODULE_1__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_saveview__WEBPACK_IMPORTED_MODULE_10__.default));
            }
        },
        "/newuser": {
            render: function () {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layoutfavorite__WEBPACK_IMPORTED_MODULE_11__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_newuser__WEBPACK_IMPORTED_MODULE_8__.default));
            }
        },
        "/account": {
            render: function () {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layoutfavorite__WEBPACK_IMPORTED_MODULE_11__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_accountview__WEBPACK_IMPORTED_MODULE_7__.default));
            }
        },
        "/login": {
            render: function () {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layoutfavorite__WEBPACK_IMPORTED_MODULE_11__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_login__WEBPACK_IMPORTED_MODULE_9__.default));
            }
        },
        "/favoriteview": {
            render: function () {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layoutfavorite__WEBPACK_IMPORTED_MODULE_11__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_favoriteview__WEBPACK_IMPORTED_MODULE_12__.default));
            }
        },
        "/cameraview": {
            render: function () {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layoutfavorite__WEBPACK_IMPORTED_MODULE_11__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_cameraview__WEBPACK_IMPORTED_MODULE_13__.default));
            }
        },
        "/uploaderror": {
            render: function () {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layoutfavorite__WEBPACK_IMPORTED_MODULE_11__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_uploaderror__WEBPACK_IMPORTED_MODULE_16__.default));
            }
        },
        "/archiveview": {
            render: function () {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layoutfavorite__WEBPACK_IMPORTED_MODULE_11__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_archiveview__WEBPACK_IMPORTED_MODULE_14__.default));
            }
        },
        "/prearchiveview/:url": {
            render: function (vnode) {
                return mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_layoutfavorite__WEBPACK_IMPORTED_MODULE_11__.default, mithril__WEBPACK_IMPORTED_MODULE_0___default()(_views_prearchiveview__WEBPACK_IMPORTED_MODULE_15__.default, vnode.attrs));
            }
        },
    });
}

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,